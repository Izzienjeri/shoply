# Extracted Code (.ts, .tsx, .css)
# Date and Time: 2025-05-26 01:36:01
# Files Included: 28

# === lib/utils.ts ===
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


export const formatPrice = (priceString: string | number): string => {
  const price = typeof priceString === 'string' ? parseFloat(priceString) : priceString;
  if (isNaN(price)) return 'N/A';
  return `Ksh ${price.toLocaleString('en-KE', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
}

# === lib/api.ts ===
import { getAuthToken, clearAuthToken } from '../contexts/AuthContext'

const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL;

interface RequestOptions extends RequestInit {
  needsAuth?: boolean;
  isFormData?: boolean;
}

async function request<T>(
  endpoint: string,
  options: RequestOptions = {}
): Promise<T | null> {
  const url = `${API_BASE_URL}${endpoint}`;
  const headers: HeadersInit = options.isFormData ? {} : { 'Content-Type': 'application/json' };
  let body = options.body;

  if (options.needsAuth) {
    const token = getAuthToken();
    if (token) {
      (headers as Record<string, string>)['Authorization'] = `Bearer ${token}`;
    } else {
      console.warn('Auth token needed but not found for', endpoint);
       throw new Error("Authentication required.");
    }
  }

  if (body && !options.isFormData && typeof body !== 'string') {
     body = JSON.stringify(body);
  }

  try {
    const response = await fetch(url, {
      ...options,
      headers,
      body,
    });

    if (!response.ok) {
      if (response.status === 401) {
         console.error('Unauthorized request to', endpoint);
      }
      let errorData;
      try {
         errorData = await response.json();
      } catch (parseError) {
         errorData = { message: response.statusText || `Request failed with status ${response.status}` };
      }
      console.error(`API Error (${response.status}):`, errorData);
      throw new Error(errorData?.message || `Request failed with status ${response.status}`);
    }

    if (response.status === 204) {
      return null;
    }

    return await response.json() as T;

  } catch (error) {
    console.error('Network or API request error:', error);
    throw error;
  }
}

export const apiClient = {
  get: <T>(endpoint: string, options: Omit<RequestOptions, 'method' | 'body'> = {}) =>
    request<T>(endpoint, { ...options, method: 'GET' }),

  post: <T>(endpoint: string, body: any, options: Omit<RequestOptions, 'method' | 'body'> = {}) =>
    request<T>(endpoint, { ...options, method: 'POST', body }),

  put: <T>(endpoint: string, body: any, options: Omit<RequestOptions, 'method' | 'body'> = {}) =>
    request<T>(endpoint, { ...options, method: 'PUT', body }),

  patch: <T>(endpoint: string, body: any, options: Omit<RequestOptions, 'method' | 'body'> = {}) =>
    request<T>(endpoint, { ...options, method: 'PATCH', body }),

  delete: <T = void>(endpoint: string, options: Omit<RequestOptions, 'method' | 'body'> = {}) =>
    request<T>(endpoint, { ...options, method: 'DELETE' }),
};

# === lib/types.ts ===
export interface Artist {
  id: string;
  name: string;
  bio?: string;
  created_at: string;
  updated_at: string;
  artworks?: Pick<Artwork, 'id' | 'name' | 'image_url' | 'price' | 'artist' | 'stock_quantity' | 'description' | 'is_active'>[];
  artworks_count?: number;
  is_active?: boolean;
}

export interface Artwork {
  id: string;
  name: string;
  description?: string;
  price: string;
  stock_quantity: number;
  created_at: string;
  updated_at: string;
  image_url?: string | null;
  artist_id: string;
  artist: Pick<Artist, 'id' | 'name' | 'is_active'>;
  is_active?: boolean;
}

export interface CartItem {
  id: string;
  artwork_id: string;
  quantity: number;
  artwork: Pick<Artwork, 'id' | 'name' | 'price' | 'image_url' | 'artist' | 'stock_quantity' | 'is_active'>;
}
export interface Cart {
  id: string;
  user_id: string;
  created_at: string;
  updated_at: string;
  items: CartItem[];
  total_price?: string;
}

export interface DeliveryOption {
  id: string;
  name: string;
  price: string;
  description?: string | null;
  is_pickup: boolean;
  active: boolean;
  sort_order: number;
  created_at?: string;
  updated_at?: string;
}

export interface OrderItem {
  id: string;
  artwork_id: string;
  quantity: number;
  price_at_purchase: string;
  artwork: Pick<Artwork, 'id' | 'name' | 'image_url' | 'artist' | 'is_active'>; 
}

export interface Order {
  id: string;
  user_id: string;
  user?: Pick<User, 'id' | 'email' | 'name'>;
  total_price: string;
  status: 'pending' | 'paid' | 'shipped' | 'delivered' | 'cancelled' | 'picked_up';
  created_at: string;
  updated_at: string;
  shipped_at?: string | null;
  shipping_address?: string | null;
  billing_address?: string | null;
  payment_gateway_ref?: string | null;
  items: OrderItem[];
  delivery_fee?: string;
  delivery_option_details?: Pick<DeliveryOption, 'id' | 'name' | 'price' | 'is_pickup' | 'description'>;
  picked_up_by_name?: string | null;
  picked_up_by_id_no?: string | null;
  picked_up_at?: string | null;
}

export interface User {
  id: string;
  email: string;
  name?: string;
  address?: string;
  created_at: string;
  is_admin?: boolean;
}

export interface ApiErrorResponse {
    message: string;
    errors?: Record<string, string[]>;
}

export interface LoginResponse {
    message: string;
    access_token: string;
    user?: {
      id: string;
      email: string;
      name?: string;
      is_admin?: boolean;
    }
}

export interface SignupResponse {
    message: string;
    user: User;
}

export interface StkPushInitiationResponse {
  message: string;
  CheckoutRequestID: string;
  ResponseDescription: string;
  transaction_id: string;
}

export interface UserProfile extends User {}

export interface PaymentTransactionStatusResponse {
    status: 'initiated' | 'pending_stk_initiation' | 'pending_confirmation' | 'successful' | 'failed_stk_initiation' | 'failed_stk_missing_id' | 'failed_underpaid' | 'failed_processing_error' | 'cancelled_by_user' | 'failed_daraja' | 'failed_timeout' | 'failed_missing_receipt' | 'not_found';
    checkout_request_id: string | null;
    message: string;
    order_id?: string;
}

export interface AdminOrderUpdatePayload {
    status?: Order['status'];
    picked_up_by_name?: string;
    picked_up_by_id_no?: string;
}

export interface AdminDashboardStatsData {
  total_artworks: number;
  active_artworks: number;
  total_artists: number;
  active_artists: number;
  pending_orders_count: number;
  paid_orders_count: number;
  revenue_this_month: string;
  recent_orders: Order[];
  sales_trend: { month: string; revenue: number }[];
}

# === app/globals.css ===
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --font-family-sans: var(--font-montserrat), sans-serif;
  --font-family-serif: var(--font-playfair), serif;
  --font-family-mono: var(--font-geist-mono), monospace;

  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {

  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.147 0.004 49.25);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.147 0.004 49.25);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.147 0.004 49.25);
  --primary: oklch(0.216 0.006 56.043);
  --primary-foreground: oklch(0.985 0.001 106.423);
  --secondary: oklch(0.97 0.001 106.424);
  --secondary-foreground: oklch(0.216 0.006 56.043);
  --muted: oklch(0.97 0.001 106.424);
  --muted-foreground: oklch(0.553 0.013 58.071);
  --accent: oklch(0.97 0.001 106.424);
  --accent-foreground: oklch(0.216 0.006 56.043);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.923 0.003 48.717);
  --input: oklch(0.923 0.003 48.717);
  --ring: oklch(0.709 0.01 56.259);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0.001 106.423);
  --sidebar-foreground: oklch(0.147 0.004 49.25);
  --sidebar-primary: oklch(0.216 0.006 56.043);
  --sidebar-primary-foreground: oklch(0.985 0.001 106.423);
  --sidebar-accent: oklch(0.97 0.001 106.424);
  --sidebar-accent-foreground: oklch(0.216 0.006 56.043);
  --sidebar-border: oklch(0.923 0.003 48.717);
  --sidebar-ring: oklch(0.709 0.01 56.259);
}

.dark {
  --background: oklch(0.147 0.004 49.25);
  --foreground: oklch(0.985 0.001 106.423);
  --card: oklch(0.216 0.006 56.043);
  --card-foreground: oklch(0.985 0.001 106.423);
  --popover: oklch(0.216 0.006 56.043);
  --popover-foreground: oklch(0.985 0.001 106.423);
  --primary: oklch(0.923 0.003 48.717);
  --primary-foreground: oklch(0.216 0.006 56.043);
  --secondary: oklch(0.268 0.007 34.298);
  --secondary-foreground: oklch(0.985 0.001 106.423);
  --muted: oklch(0.268 0.007 34.298);
  --muted-foreground: oklch(0.709 0.01 56.259);
  --accent: oklch(0.268 0.007 34.298);
  --accent-foreground: oklch(0.985 0.001 106.423);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.553 0.013 58.071);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.216 0.006 56.043);
  --sidebar-foreground: oklch(0.985 0.001 106.423);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0.001 106.423);
  --sidebar-accent: oklch(0.268 0.007 34.298);
  --sidebar-accent-foreground: oklch(0.985 0.001 106.423);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.553 0.013 58.071);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground font-sans;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
}

# === app/layout.tsx ===
import type { Metadata } from "next";
import "./globals.css";
import { Playfair_Display, Montserrat } from 'next/font/google';
import { cn } from "@/lib/utils";
import { AuthProvider } from "@/contexts/AuthContext";
import { CartProvider } from "@/contexts/CartContext";
import { ConditionalNavbarWrapper } from "@/components/layout/ConditionalNavbarWrapper";
import { Footer } from "@/components/layout/Footer";
import { Toaster } from "@/components/ui/sonner";

const montserrat = Montserrat({
  subsets: ['latin'],
  weight: ['300', '400', '500', '600', '700'],
  variable: '--font-montserrat'
});

const playfair = Playfair_Display({
  subsets: ['latin'],
  weight: ['400', '700'],
  variable: '--font-playfair'
});

export const metadata: Metadata = {
  title: "Artistry Haven",
  description: "Discover and purchase unique artwork online.",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={cn(
          "min-h-screen bg-background font-sans antialiased flex flex-col",
          montserrat.variable,
          playfair.variable
        )}
      >
        <AuthProvider>
          <CartProvider>
            <ConditionalNavbarWrapper />
            <main className="flex-grow container mx-auto px-4 py-8">
              {children}
            </main>
            <Footer />
            <Toaster richColors position="top-right" />
          </CartProvider>
        </AuthProvider>
      </body>
    </html>
  );
}

# === app/page.tsx ===
import { Button } from "@/components/ui/button";
import Link from "next/link";

export default function Home() {
  return (
    <div className="flex flex-col items-center justify-center text-center space-y-6 min-h-[calc(100vh-theme(spacing.16)-theme(spacing.16)-theme(spacing.12))]">
      <h1 className="text-4xl font-bold font-serif tracking-tight lg:text-5xl text-primary">
        Welcome to Artistry Haven
      </h1>
      <p className="max-w-xl text-lg text-muted-foreground">
        Discover unique and captivating artwork from talented artists around the world. Find the perfect piece to inspire your space.
      </p>
      <div>
        <Link href="/artworks">
          <Button size="lg">Explore Artwork</Button>
        </Link>
      </div>
    </div>
  );
}

# === app/admin/layout.tsx ===
'use client';

import { ReactNode } from 'react';
import Link from 'next/link';
import { AdminGuard } from '@/components/admin/AdminGuard';
import { Button } from '@/components/ui/button';
import { Home, Package, Users, Settings, ShoppingBag, LogOut } from 'lucide-react';
import { useAuth } from '@/contexts/AuthContext';


function AdminSidebar() {
    const { logout } = useAuth();

    const navItems = [
        { href: '/admin', label: 'Dashboard', icon: Home },
        { href: '/admin/artworks', label: 'Artworks', icon: Package },
        { href: '/admin/artists', label: 'Artists', icon: Users },
        { href: '/admin/orders', label: 'Orders', icon: ShoppingBag },
        { href: '/admin/delivery-options', label: 'Delivery', icon: Settings },
    ];

    return (
        <aside className="w-64 bg-gray-100 dark:bg-gray-900 p-6 border-r dark:border-gray-700 flex flex-col">
            <div className="mb-8">
                <Link href="/admin" className="block text-center md:text-left">
                    <h1 className="text-xl font-bold font-serif text-primary">Artistry Haven</h1>
                    <span className="text-sm text-muted-foreground">Admin Panel</span>
                </Link>
            </div>
            <nav className="space-y-2 flex-grow">
                {navItems.map((item) => (
                    <Link
                        key={item.label}
                        href={item.href}
                        className="flex items-center px-3 py-2.5 text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md transition-colors"
                    >
                        <item.icon className="mr-3 h-5 w-5" />
                        {item.label}
                    </Link>
                ))}
            </nav>
            <div className="mt-auto pt-4 border-t border-gray-300 dark:border-gray-600 space-y-2">
                 <Link href="/"
                    className="flex items-center px-3 py-2.5 text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md transition-colors"
                 >
                    <Home className="mr-3 h-5 w-5" />
                    Back to Site
                 </Link>
                 <Button
                    onClick={async () => {
                        await logout();
                    }}
                    variant="ghost"
                    className="w-full justify-start text-left px-3 py-2.5 text-sm font-medium text-red-600 dark:text-red-400 hover:bg-red-100 dark:hover:bg-red-900/50 hover:text-red-700 dark:hover:text-red-500 rounded-md transition-colors"
                 >
                    <LogOut className="mr-3 h-5 w-5" />
                    Logout
                 </Button>
            </div>
        </aside>
    );
}


export default function AdminLayout({ children }: { children: ReactNode }) {
  return (
    <AdminGuard>
      <div className="min-h-screen flex flex-col bg-gray-50 dark:bg-gray-950">
        <div className="flex flex-1 overflow-hidden">
          <AdminSidebar />
          <main className="flex-1 p-6 md:p-8 overflow-y-auto">
            {children}
          </main>
        </div>
      </div>
    </AdminGuard>
  );
}

# === app/admin/page.tsx ===
'use client';

import { useEffect, useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Package, Users, DollarSign, ShoppingBag, Settings, BarChart3, AlertTriangle, Loader2 } from "lucide-react";
import Link from "next/link";
import { Button } from '@/components/ui/button';
import { apiClient } from '@/lib/api';
import { AdminDashboardStatsData, Order as OrderType } from '@/lib/types';
import { formatPrice, cn } from '@/lib/utils';
import { Skeleton } from '@/components/ui/skeleton';
import { ResponsiveContainer, LineChart, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Line } from 'recharts';
import { Badge } from '@/components/ui/badge';


interface StatCardProps {
  title: string;
  value: string | number;
  icon: React.ElementType;
  href?: string;
  description?: string;
  isLoading?: boolean;
}

function StatCard({ title, value, icon: Icon, href, description, isLoading }: StatCardProps) {
  const cardElement = (
    <Card className={cn("hover:shadow-lg transition-shadow", href && "cursor-pointer")}>
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle className="text-sm font-medium">{title}</CardTitle>
        <Icon className="h-5 w-5 text-muted-foreground" />
      </CardHeader>
      <CardContent>
        {isLoading ? (
          <>
            <Skeleton className="h-8 w-24 mb-1" />
            {description && <Skeleton className="h-4 w-32" />}
          </>
        ) : (
          <>
            <div className="text-2xl font-bold">{value}</div>
            {description && <p className="text-xs text-muted-foreground">{description}</p>}
          </>
        )}
      </CardContent>
    </Card>
  );

  return href ? <Link href={href}>{cardElement}</Link> : cardElement;
}

export default function AdminDashboardPage() {
  const [statsData, setStatsData] = useState<AdminDashboardStatsData | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchDashboardData = async () => {
      setIsLoading(true);
      setError(null);
      try {
        const data = await apiClient.get<AdminDashboardStatsData>('/admin/dashboard/stats', { needsAuth: true });
        setStatsData(data);
      } catch (err: any) {
        setError(err.message || "Failed to load dashboard data.");
        console.error("Dashboard fetch error:", err);
      } finally {
        setIsLoading(false);
      }
    };
    fetchDashboardData();
  }, []);

  const dynamicStats = statsData ? [
    { title: "Total Artworks", value: statsData.total_artworks, description: `${statsData.active_artworks} active`, icon: Package, href: "/admin/artworks" },
    { title: "Total Artists", value: statsData.total_artists, description: `${statsData.active_artists} active`, icon: Users, href: "/admin/artists" },
    { title: "Pending Orders", value: statsData.pending_orders_count, description: `${statsData.paid_orders_count} paid`, icon: ShoppingBag, href: "/admin/orders?status=pending" },
    { title: "Revenue (This Month)", value: formatPrice(statsData.revenue_this_month), icon: DollarSign, href: "/admin/orders?status=paid" },
  ] : [
    { title: "Total Artworks", value: "0", icon: Package, href: "/admin/artworks", isLoading: true },
    { title: "Total Artists", value: "0", icon: Users, href: "/admin/artists", isLoading: true },
    { title: "Pending Orders", value: "0", icon: ShoppingBag, href: "/admin/orders?status=pending", isLoading: true },
    { title: "Revenue (This Month)", value: "Ksh 0.00", icon: DollarSign, href: "#", isLoading: true },
  ];

  if (error) {
    return (
      <div className="flex flex-col items-center justify-center h-full">
        <AlertTriangle className="h-12 w-12 text-destructive mb-4" />
        <h2 className="text-xl font-semibold text-destructive">Error Loading Dashboard</h2>
        <p className="text-muted-foreground">{error}</p>
        <Button onClick={() => window.location.reload()} className="mt-4">Retry</Button>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      <header className="mb-6">
        <h1 className="text-3xl font-bold tracking-tight text-gray-900 dark:text-white">Admin Dashboard</h1>
        <p className="text-sm text-gray-500 dark:text-gray-400">Overview of your art store.</p>
      </header>

      <section className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
        {dynamicStats.map((stat) => (
          <StatCard 
            key={stat.title}
            title={stat.title}
            value={stat.value as string | number}
            icon={stat.icon}
            href={stat.href}
            description={(stat as any).description}
            isLoading={isLoading || (stat as any).isLoading}
          />
        ))}
      </section>

      <section className="grid gap-6 lg:grid-cols-2">
        <Card>
          <CardHeader>
            <CardTitle>Recent Orders</CardTitle>
            <CardDescription>A list of the most recent orders.</CardDescription>
          </CardHeader>
          <CardContent>
            {isLoading && !statsData?.recent_orders ? (
              <div className="space-y-3">
                <Skeleton className="h-10 w-full" />
                <Skeleton className="h-10 w-full" />
                <Skeleton className="h-10 w-full" />
              </div>
            ) : statsData && statsData.recent_orders.length > 0 ? (
              <ul className="divide-y divide-gray-200 dark:divide-gray-700">
                {statsData.recent_orders.map((order: OrderType) => (
                  <li key={order.id} className="py-3">
                    <div className="flex justify-between items-center">
                      <div>
                        <p className="text-sm font-medium text-gray-900 dark:text-white">Order #{order.id.substring(0, 8)}...</p>
                        <p className="text-xs text-gray-500 dark:text-gray-400">
                          {order.user?.email || 'Unknown User'} - {new Date(order.created_at).toLocaleDateString()}
                        </p>
                      </div>
                      <div className="text-right">
                         <p className="text-sm font-semibold">{formatPrice(order.total_price)}</p>
                         <Badge 
                            variant={
                                order.status === 'paid' || order.status === 'delivered' || order.status === 'picked_up' ? 'default' :
                                order.status === 'pending' ? 'secondary' :
                                order.status === 'shipped' ? 'outline' :
                                'destructive'
                            } 
                            className="capitalize mt-1"
                         >
                             {order.status.replace('_', ' ')}
                         </Badge>
                      </div>
                    </div>
                  </li>
                ))}
              </ul>
            ) : (
              <p className="text-muted-foreground">No recent orders found.</p>
            )}
            <div className="mt-4">
                <Link href="/admin/orders" className="text-sm font-medium text-primary hover:underline">
                    View all orders →
                </Link>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Sales Analytics</CardTitle>
             <CardDescription>Monthly sales performance chart (last 6 months).</CardDescription>
          </CardHeader>
          <CardContent>
            {isLoading && !statsData?.sales_trend ? (
              <Skeleton className="h-64 w-full" />
            ) : statsData && statsData.sales_trend.length > 0 ? (
              <div className="h-64">
                 <ResponsiveContainer width="100%" height="100%">
                     <LineChart data={statsData.sales_trend} margin={{ top: 5, right: 20, left: -20, bottom: 5 }}>
                         <CartesianGrid strokeDasharray="3 3" />
                         <XAxis dataKey="month" fontSize={12} />
                         <YAxis fontSize={12} tickFormatter={(value) => `Ksh ${value/1000}k`} />
                         <Tooltip formatter={(value: number) => [formatPrice(value.toString()), "Revenue"]} />
                         <Legend wrapperStyle={{ fontSize: "12px" }} />
                         <Line type="monotone" dataKey="revenue" stroke="#8884d8" strokeWidth={2} activeDot={{ r: 6 }} />
                     </LineChart>
                 </ResponsiveContainer>
              </div>
            ) : (
              <div className="h-64 bg-gray-100 dark:bg-gray-800 flex items-center justify-center rounded-md">
                <p className="text-muted-foreground">No sales data available for chart.</p>
              </div>
            )}
          </CardContent>
        </Card>
      </section>

      <section>
          <h2 className="text-xl font-semibold mb-4 text-gray-800 dark:text-white">Quick Actions</h2>
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
              <Link href="/admin/artworks/new">
                  <Button variant="outline" className="w-full justify-start p-4 h-auto text-left">
                      <Package className="mr-3 h-5 w-5 flex-shrink-0" />
                      <div>
                          <p className="font-semibold">Add New Artwork</p>
                          <p className="text-xs text-muted-foreground">Create a new piece for the gallery.</p>
                      </div>
                  </Button>
              </Link>
              <Link href="/admin/artists/new">
                   <Button variant="outline" className="w-full justify-start p-4 h-auto text-left">
                      <Users className="mr-3 h-5 w-5 flex-shrink-0" />
                       <div>
                          <p className="font-semibold">Add New Artist</p>
                          <p className="text-xs text-muted-foreground">Register a new artist profile.</p>
                      </div>
                  </Button>
              </Link>
               <Link href="/admin/delivery-options">
                   <Button variant="outline" className="w-full justify-start p-4 h-auto text-left">
                      <Settings className="mr-3 h-5 w-5 flex-shrink-0" />
                       <div>
                          <p className="font-semibold">Manage Delivery Options</p>
                          <p className="text-xs text-muted-foreground">Update shipping & pickup methods.</p>
                      </div>
                  </Button>
              </Link>
          </div>
      </section>
    </div>
  );
}

# === app/admin/delivery-options/page.tsx ===
'use client';

import React, { useState, useEffect, useMemo } from 'react';
import { useForm, SubmitHandler } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { toast } from 'sonner';
import {
  ColumnDef,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
  SortingState,
  ColumnFiltersState,
  Row,
  Column,
  HeaderGroup,
  Cell,
} from '@tanstack/react-table';

import { DeliveryOption as DeliveryOptionType, ApiErrorResponse } from '@/lib/types';
import { apiClient } from '@/lib/api';
import { formatPrice, cn } from '@/lib/utils';

import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Checkbox } from '@/components/ui/checkbox';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogClose,
} from '@/components/ui/dialog';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Badge } from '@/components/ui/badge';
import { Skeleton } from '@/components/ui/skeleton';
import { PlusCircle, Edit3, Trash2, Search, ArrowUpDown, Loader2 } from 'lucide-react';

const deliveryOptionFormSchema = z.object({
  name: z.string().min(1, "Name is required"),
  price: z.coerce.number().min(0, "Price must be non-negative"),
  description: z.string().optional().nullable(),
  is_pickup: z.boolean().default(false),
  active: z.boolean().default(true),
  sort_order: z.coerce.number().int().default(0),
});

type DeliveryOptionFormValues = z.infer<typeof deliveryOptionFormSchema>;
type DeliveryOptionFormInput = z.input<typeof deliveryOptionFormSchema>;


interface DeliveryOptionApiPayload {
    name: string;
    price: string;
    description?: string | null;
    is_pickup: boolean;
    active: boolean;
    sort_order: number;
}


export default function AdminDeliveryOptionsPage() {
  const [deliveryOptions, setDeliveryOptions] = useState<DeliveryOptionType[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [editingOption, setEditingOption] = useState<DeliveryOptionType | null>(null);
  const [showFormDialog, setShowFormDialog] = useState(false);
  const [optionToDelete, setOptionToDelete] = useState<DeliveryOptionType | null>(null);

  const [sorting, setSorting] = useState<SortingState>([{ id: 'sort_order', desc: false }]);
  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);

  const form = useForm<DeliveryOptionFormInput, any, DeliveryOptionFormValues>({
    resolver: zodResolver(deliveryOptionFormSchema),
    defaultValues: {
      name: "",
      price: 0,
      description: null,
      is_pickup: false,
      active: true,
      sort_order: 0,
    },
  });

  const fetchDeliveryOptions = async () => {
    setIsLoading(true);
    try {
      const fetchedOptions = await apiClient.get<DeliveryOptionType[]>('/delivery/options', { needsAuth: true });
      setDeliveryOptions(fetchedOptions || []);
    } catch (error) {
      console.error("Failed to fetch delivery options:", error);
      toast.error("Could not load delivery options.");
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchDeliveryOptions();
  }, []);

  const handleFormSubmit: SubmitHandler<DeliveryOptionFormValues> = async (values) => {
    setIsSubmitting(true);
    const payload: DeliveryOptionApiPayload = {
        ...values,
        price: values.price.toString(),
        description: values.description || null,
    };

    try {
      if (editingOption) {
        toast.info("Update functionality for delivery options requires backend changes.");
        throw new Error("Backend for PATCH /delivery/options/:id not implemented.");
      } else {
        toast.info("Create functionality for delivery options requires backend changes.");
        throw new Error("Backend for POST /delivery/options not implemented.");
      }
    } catch (error: any) {
      const apiError = error as ApiErrorResponse;
      toast.error(apiError.message || "An error occurred.");
      if (apiError.errors) {
        Object.entries(apiError.errors).forEach(([field, messages]) => {
          form.setError(field as keyof DeliveryOptionFormInput, { type: "server", message: messages.join(", ") });
        });
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  const openEditDialog = (option: DeliveryOptionType) => {
    setEditingOption(option);
    form.reset({
      name: option.name,
      price: parseFloat(option.price),
      description: option.description || null,
      is_pickup: option.is_pickup,
      active: option.active,
      sort_order: option.sort_order,
    });
    setShowFormDialog(true);
  };

  const openNewDialog = () => {
    setEditingOption(null);
    form.reset({
        name: "",
        price: 0,
        description: null,
        is_pickup: false,
        active: true,
        sort_order: 0,
    });
    setShowFormDialog(true);
  };

  const handleDeleteOption = async () => {
    if (!optionToDelete) return;
    setIsSubmitting(true);
    try {
      toast.info("Delete functionality for delivery options requires backend changes.");
      throw new Error("Backend for DELETE /delivery/options/:id not implemented.");
    } catch (error: any) {
      toast.error(error.message || "Failed to delete delivery option.");
    } finally {
      setIsSubmitting(false);
      setOptionToDelete(null);
    }
  };

  const columns: ColumnDef<DeliveryOptionType>[] = useMemo(() => [
    {
      accessorKey: "name",
      header: ({ column }: { column: Column<DeliveryOptionType, unknown> }) => (
        <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}>
          Name <ArrowUpDown className="ml-2 h-4 w-4" />
        </Button>
      ),
    },
    {
      accessorKey: "price",
      header: "Price",
      cell: ({ row }: { row: Row<DeliveryOptionType> }) => formatPrice(row.original.price),
    },
    {
      accessorKey: "is_pickup",
      header: "Type",
      cell: ({ row }: { row: Row<DeliveryOptionType> }) => (
        <Badge variant={row.original.is_pickup ? "outline" : "default"}>
          {row.original.is_pickup ? "Pickup" : "Delivery"}
        </Badge>
      ),
    },
    {
      accessorKey: "active",
      header: "Status",
      cell: ({ row }: { row: Row<DeliveryOptionType> }) => (
        <Badge variant={row.original.active ? "default" : "secondary"}>
          {row.original.active ? "Active" : "Inactive"}
        </Badge>
      ),
    },
    {
      accessorKey: "sort_order",
      header: "Sort Order",
    },
    {
      id: "actions",
      header: "Actions",
      cell: ({ row }: { row: Row<DeliveryOptionType> }) => (
        <div className="flex space-x-2">
          <Button variant="ghost" size="icon" onClick={() => openEditDialog(row.original)} title="Edit">
            <Edit3 className="h-4 w-4" />
          </Button>
          <Button variant="ghost" size="icon" onClick={() => setOptionToDelete(row.original)} title="Delete">
            <Trash2 className="h-4 w-4 text-destructive" />
          </Button>
        </div>
      ),
    },
  ], []);

  const table = useReactTable({
    data: deliveryOptions,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    state: {
      sorting,
      columnFilters,
    },
  });

   if (isLoading && deliveryOptions.length === 0) {
    return (
        <div className="space-y-4">
            <div className="flex justify-between items-center">
                 <h1 className="text-2xl font-semibold">Manage Delivery Options</h1>
                <Skeleton className="h-10 w-36" />
            </div>
            <Skeleton className="h-10 w-full" />
            {Array.from({length: 3}).map((_, i) => <Skeleton key={i} className="h-16 w-full" />)}
        </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold tracking-tight">Manage Delivery Options</h1>
        <Button onClick={openNewDialog}>
          <PlusCircle className="mr-2 h-4 w-4" /> Add New Option
        </Button>
      </div>

      <div className="flex items-center py-4">
        <div className="relative w-full max-w-sm">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Filter by name..."
            value={(table.getColumn("name")?.getFilterValue() as string) ?? ""}
            onChange={(event) => table.getColumn("name")?.setFilterValue(event.target.value)}
            className="pl-10"
          />
        </div>
      </div>

      <div className="rounded-md border bg-card">
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup: HeaderGroup<DeliveryOptionType>) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <TableHead key={header.id}>
                    {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}
                  </TableHead>
                ))}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows?.length ? (
              table.getRowModel().rows.map((row: Row<DeliveryOptionType>) => (
                <TableRow key={row.id}>
                  {row.getVisibleCells().map((cell: Cell<DeliveryOptionType, unknown>) => (
                    <TableCell key={cell.id}>
                      {flexRender(cell.column.columnDef.cell, cell.getContext())}
                    </TableCell>
                  ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={columns.length} className="h-24 text-center">
                  No delivery options found.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>

      <div className="flex items-center justify-end space-x-2 py-4">
        <Button variant="outline" size="sm" onClick={() => table.previousPage()} disabled={!table.getCanPreviousPage()}>Previous</Button>
        <Button variant="outline" size="sm" onClick={() => table.nextPage()} disabled={!table.getCanNextPage()}>Next</Button>
      </div>

      <Dialog open={showFormDialog} onOpenChange={(isOpen) => {
          setShowFormDialog(isOpen);
          if (!isOpen) { form.reset({ name: "", price: 0, description: null, is_pickup: false, active: true, sort_order: 0 }); setEditingOption(null); }
      }}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>{editingOption ? 'Edit Delivery Option' : 'Add New Delivery Option'}</DialogTitle>
             <DialogDescription>
                Note: Backend support for Create, Update, Delete of delivery options is pending.
             </DialogDescription>
          </DialogHeader>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(handleFormSubmit)} className="space-y-4 py-4 max-h-[70vh] overflow-y-auto pr-2">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Option Name</FormLabel>
                    <FormControl><Input placeholder="e.g., Nairobi CBD Delivery" {...field} /></FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="price"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Price (Ksh)</FormLabel>
                    <FormControl><Input type="number" step="0.01" placeholder="e.g., 200.00" {...field} /></FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Description (Optional)</FormLabel>
                    <FormControl><Textarea placeholder="Details about this option..." {...field} value={field.value || ""} className="min-h-[80px]" /></FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="sort_order"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Sort Order</FormLabel>
                    <FormControl><Input type="number" placeholder="0" {...field} /></FormControl>
                    <FormDescription>Lower numbers appear first.</FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <div className="grid grid-cols-2 gap-4 pt-2">
                 <FormField
                    control={form.control}
                    name="is_pickup"
                    render={({ field }) => (
                    <FormItem className="flex flex-row items-center space-x-3 space-y-0 rounded-md border p-3 shadow-sm">
                        <FormControl><Checkbox checked={field.value} onCheckedChange={field.onChange}/></FormControl>
                        <FormLabel className="font-normal">Is Pickup Location?</FormLabel>
                    </FormItem>
                    )}
                />
                <FormField
                    control={form.control}
                    name="active"
                    render={({ field }) => (
                    <FormItem className="flex flex-row items-center space-x-3 space-y-0 rounded-md border p-3 shadow-sm">
                        <FormControl><Checkbox checked={field.value} onCheckedChange={field.onChange}/></FormControl>
                        <FormLabel className="font-normal">Active</FormLabel>
                    </FormItem>
                    )}
                />
              </div>
              <DialogFooter className="pt-4">
                <DialogClose asChild><Button type="button" variant="outline">Cancel</Button></DialogClose>
                <Button type="submit" disabled={isSubmitting}>
                  {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                  {editingOption ? 'Save Changes' : 'Create Option'}
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>

      <AlertDialog open={!!optionToDelete} onOpenChange={(isOpen) => !isOpen && setOptionToDelete(null)}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This action cannot be undone. This will permanently delete the delivery option "{optionToDelete?.name}".
              Note: Backend support for Delete of delivery options is pending.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel onClick={() => setOptionToDelete(null)}>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={handleDeleteOption}
              disabled={isSubmitting}
              className={cn(isSubmitting && "opacity-50 cursor-not-allowed", "bg-destructive hover:bg-destructive/90")}
            >
              {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
}

# === app/admin/orders/page.tsx ===
'use client';

import React, { useState, useEffect, useMemo } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { useForm, SubmitHandler } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { toast } from 'sonner';
import {
  ColumnDef,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
  SortingState,
  ColumnFiltersState,
  Row,
  Column,
  HeaderGroup,
  Cell,
} from '@tanstack/react-table';

import { Order as OrderType, OrderItem as OrderItemType, ApiErrorResponse, AdminOrderUpdatePayload, User as UserType, DeliveryOption as DeliveryOptionType } from '@/lib/types';
import { apiClient } from '@/lib/api';
import { formatPrice, cn } from '@/lib/utils';

import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogClose,
} from '@/components/ui/dialog';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Badge } from '@/components/ui/badge';
import { Skeleton } from '@/components/ui/skeleton';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Edit3, Eye, Search, ArrowUpDown, Loader2, Truck, PackageCheck, XOctagon, History, ShieldCheck } from 'lucide-react';
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { Separator } from '@/components/ui/separator';


const orderUpdateFormSchema = z.object({
  status: z.enum(['pending', 'paid', 'shipped', 'delivered', 'cancelled', 'picked_up']),
  picked_up_by_name: z.string().optional().nullable(),
  picked_up_by_id_no: z.string().optional().nullable(),
});
type OrderUpdateFormValues = z.infer<typeof orderUpdateFormSchema>;

const placeholderImage = "/placeholder-image.svg";

function OrderItemDetailsCard({ item }: { item: OrderItemType }) {
  return (
    <div className="flex items-center space-x-3 py-2 border-b last:border-b-0">
      <div className="relative h-12 w-12 flex-shrink-0 overflow-hidden rounded-md border bg-muted">
        <Image
          src={item.artwork.image_url || placeholderImage}
          alt={item.artwork.name}
          fill
          sizes="48px"
          className="object-cover"
        />
      </div>
      <div className="flex-1 space-y-0.5">
        <p className="text-sm font-medium">{item.artwork.name}</p>
        <p className="text-xs text-muted-foreground">Qty: {item.quantity} @ {formatPrice(item.price_at_purchase)}</p>
      </div>
      <div className="text-sm font-medium">{formatPrice(parseFloat(item.price_at_purchase) * item.quantity)}</div>
    </div>
  );
}


export default function AdminOrdersPage() {
  const [orders, setOrders] = useState<OrderType[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [editingOrder, setEditingOrder] = useState<OrderType | null>(null);
  const [showEditDialog, setShowEditDialog] = useState(false);
  const [viewingOrderDetails, setViewingOrderDetails] = useState<OrderType | null>(null);
  const [showDetailsDialog, setShowDetailsDialog] = useState(false);


  const [sorting, setSorting] = useState<SortingState>([]);
  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);

  const form = useForm<OrderUpdateFormValues>({
    resolver: zodResolver(orderUpdateFormSchema),
  });

  const fetchOrders = async () => {
    setIsLoading(true);
    try {
      const fetchedOrders = await apiClient.get<OrderType[]>('/admin/dashboard/orders', { needsAuth: true });
      setOrders(fetchedOrders || []);
    } catch (error) {
      console.error("Failed to fetch orders:", error);
      toast.error("Could not load orders.");
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchOrders();
  }, []);

  const handleUpdateSubmit: SubmitHandler<OrderUpdateFormValues> = async (values) => {
    if (!editingOrder) return;
    setIsSubmitting(true);

    const payload: AdminOrderUpdatePayload = { status: values.status };
    if (values.status === 'picked_up') {
      if (!values.picked_up_by_name || !values.picked_up_by_id_no) {
        toast.error("Picker name and ID number are required for 'Picked Up' status.");
        setIsSubmitting(false);
        return;
      }
      payload.picked_up_by_name = values.picked_up_by_name;
      payload.picked_up_by_id_no = values.picked_up_by_id_no;
    } else {
        payload.picked_up_by_name = '';
        payload.picked_up_by_id_no = '';
    }


    try {
      await apiClient.patch<OrderType>(`/admin/dashboard/orders/${editingOrder.id}`, payload, { needsAuth: true });
      toast.success("Order status updated successfully!");
      setShowEditDialog(false);
      setEditingOrder(null);
      form.reset();
      fetchOrders();
    } catch (error: any) {
      const apiError = error as ApiErrorResponse;
      toast.error(apiError.message || "An error occurred while updating the order.");
    } finally {
      setIsSubmitting(false);
    }
  };

  const openEditDialog = (order: OrderType) => {
    setEditingOrder(order);
    form.reset({
      status: order.status,
      picked_up_by_name: order.picked_up_by_name || "",
      picked_up_by_id_no: order.picked_up_by_id_no || "",
    });
    setShowEditDialog(true);
  };

  const openDetailsDialog = (order: OrderType) => {
    setViewingOrderDetails(order);
    setShowDetailsDialog(true);
  };

  const currentStatus = form.watch('status');

  const columns: ColumnDef<OrderType>[] = useMemo(() => [
    {
      accessorKey: "id",
      header: ({ column }: { column: Column<OrderType, unknown> }) => (
        <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}>
          Order ID <ArrowUpDown className="ml-2 h-4 w-4" />
        </Button>
      ),
      cell: ({ row }: { row: Row<OrderType> }) => <span className="font-mono text-xs">{row.original.id.substring(0,8)}...</span>,
    },
    {
      accessorKey: "user.email",
      header: "Customer",
      cell: ({ row }: { row: Row<OrderType> }) => row.original.user?.email || row.original.user_id.substring(0,8)+'...',
    },
    {
      accessorKey: "created_at",
      header: "Date Placed",
      cell: ({ row }: { row: Row<OrderType> }) => new Date(row.original.created_at).toLocaleDateString(),
    },
    {
      accessorKey: "total_price",
      header: "Total",
      cell: ({ row }: { row: Row<OrderType> }) => formatPrice(row.original.total_price),
    },
    {
        accessorKey: "delivery_option_details.name",
        header: "Delivery",
        cell: ({ row }: { row: Row<OrderType> }) => (
            <div className="text-xs">
                <p>{row.original.delivery_option_details?.name || 'N/A'}</p>
                {row.original.delivery_option_details?.is_pickup && <Badge variant="outline" className="mt-1">Pickup</Badge>}
            </div>
        ),
    },
    {
      accessorKey: "status",
      header: "Status",
      cell: ({ row }: { row: Row<OrderType> }) => (
        <Badge
          variant={
            row.original.status === 'paid' || row.original.status === 'delivered' || row.original.status === 'picked_up' ? 'default' :
            row.original.status === 'pending' ? 'secondary' :
            row.original.status === 'shipped' ? 'outline' :
            'destructive'
          }
          className="capitalize"
        >
          {row.original.status.replace('_', ' ')}
        </Badge>
      ),
      filterFn: (row: Row<OrderType>, id: string, value: any) => value.includes(row.getValue(id)),
    },
    {
      id: "actions",
      header: "Actions",
      cell: ({ row }: { row: Row<OrderType> }) => (
        <div className="flex space-x-1">
          <Button variant="ghost" size="icon" onClick={() => openDetailsDialog(row.original)} title="View Details">
            <Eye className="h-4 w-4" />
          </Button>
          <Button variant="ghost" size="icon" onClick={() => openEditDialog(row.original)} title="Edit Status">
            <Edit3 className="h-4 w-4" />
          </Button>
        </div>
      ),
    },
  ], []);

  const table = useReactTable({
    data: orders,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    state: {
      sorting,
      columnFilters,
    },
  });

  if (isLoading && orders.length === 0) {
    return (
        <div className="space-y-4">
            <h1 className="text-2xl font-semibold">Manage Orders</h1>
            <Skeleton className="h-10 w-full" />
            {Array.from({length: 5}).map((_, i) => <Skeleton key={i} className="h-16 w-full" />)}
        </div>
    );
  }

  return (
    <div className="space-y-6">
      <h1 className="text-2xl font-bold tracking-tight">Manage Orders</h1>

      <div className="flex items-center py-4">
        <div className="relative w-full max-w-sm">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Filter by Order ID or Customer..."
            value={(table.getColumn("id")?.getFilterValue() as string) ?? (table.getColumn("user.email")?.getFilterValue() as string) ?? ""}
            onChange={(event) => {
                const value = event.target.value;
                table.getColumn("id")?.setFilterValue(value);
            }}
            className="pl-10"
          />
        </div>
      </div>

      <div className="rounded-md border bg-card">
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup: HeaderGroup<OrderType>) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <TableHead key={header.id}>
                    {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}
                  </TableHead>
                ))}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows?.length ? (
              table.getRowModel().rows.map((row: Row<OrderType>) => (
                <TableRow key={row.id}>
                  {row.getVisibleCells().map((cell: Cell<OrderType, unknown>) => (
                    <TableCell key={cell.id}>
                      {flexRender(cell.column.columnDef.cell, cell.getContext())}
                    </TableCell>
                  ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={columns.length} className="h-24 text-center">
                  No orders found.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>

      <div className="flex items-center justify-end space-x-2 py-4">
        <Button variant="outline" size="sm" onClick={() => table.previousPage()} disabled={!table.getCanPreviousPage()}>Previous</Button>
        <Button variant="outline" size="sm" onClick={() => table.nextPage()} disabled={!table.getCanNextPage()}>Next</Button>
      </div>

      <Dialog open={showEditDialog} onOpenChange={(isOpen) => {
          setShowEditDialog(isOpen);
          if (!isOpen) { form.reset(); setEditingOrder(null); }
      }}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Update Order Status</DialogTitle>
            <DialogDescription>Order ID: {editingOrder?.id.substring(0,8)}...</DialogDescription>
          </DialogHeader>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(handleUpdateSubmit)} className="space-y-4 py-4">
              <FormField
                control={form.control}
                name="status"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Status</FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl><SelectTrigger><SelectValue placeholder="Select status" /></SelectTrigger></FormControl>
                      <SelectContent>
                        {(['pending', 'paid', 'shipped', 'delivered', 'cancelled', 'picked_up'] as const).map(s => (
                          <SelectItem key={s} value={s} className="capitalize">{s.replace('_', ' ')}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              {currentStatus === 'picked_up' && (
                <>
                  <FormField
                    control={form.control}
                    name="picked_up_by_name"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Picked Up By (Name)</FormLabel>
                        <FormControl><Input placeholder="Full name of collector" {...field} value={field.value || ''} /></FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="picked_up_by_id_no"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Picker's ID Number</FormLabel>
                        <FormControl><Input placeholder="ID or Passport No." {...field} value={field.value || ''} /></FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </>
              )}
              <DialogFooter>
                <DialogClose asChild><Button type="button" variant="outline">Cancel</Button></DialogClose>
                <Button type="submit" disabled={isSubmitting}>
                  {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                  Update Status
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>

      {/* View Order Details Dialog */}
      <Dialog open={showDetailsDialog} onOpenChange={setShowDetailsDialog}>
        <DialogContent className="sm:max-w-lg md:max-w-xl lg:max-w-2xl max-h-[90vh] overflow-y-auto">
            <DialogHeader>
                <DialogTitle>Order Details: {viewingOrderDetails?.id.substring(0,8)}...</DialogTitle>
            </DialogHeader>
            {viewingOrderDetails && (
                <div className="py-4 space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                        <div><strong>Order ID:</strong> {viewingOrderDetails.id}</div>
                        <div><strong>Date:</strong> {new Date(viewingOrderDetails.created_at).toLocaleString()}</div>
                        <div><strong>Customer:</strong> {viewingOrderDetails.user?.name || viewingOrderDetails.user?.email || 'N/A'}</div>
                        <div><strong>Status:</strong> <Badge className="capitalize">{viewingOrderDetails.status.replace('_',' ')}</Badge></div>
                        <div><strong>Total Amount:</strong> {formatPrice(viewingOrderDetails.total_price)}</div>
                        <div><strong>M-Pesa Ref:</strong> {viewingOrderDetails.payment_gateway_ref || 'N/A'}</div>
                    </div>
                    <Separator />
                    <div>
                        <h4 className="font-semibold mb-1">Delivery Details:</h4>
                        <p className="text-sm"><strong>Method:</strong> {viewingOrderDetails.delivery_option_details?.name || 'N/A'}</p>
                        <p className="text-sm"><strong>Fee:</strong> {formatPrice(viewingOrderDetails.delivery_fee || '0')}</p>
                        <p className="text-sm"><strong>Address:</strong> {viewingOrderDetails.shipping_address || 'N/A'}</p>
                         {viewingOrderDetails.delivery_option_details?.is_pickup && viewingOrderDetails.status === 'picked_up' && (
                            <>
                                <p className="text-sm mt-1"><strong>Picked Up By:</strong> {viewingOrderDetails.picked_up_by_name || 'N/A'}</p>
                                <p className="text-sm"><strong>Picker's ID:</strong> {viewingOrderDetails.picked_up_by_id_no || 'N/A'}</p>
                                <p className="text-sm"><strong>Picked Up At:</strong> {viewingOrderDetails.picked_up_at ? new Date(viewingOrderDetails.picked_up_at).toLocaleString() : 'N/A'}</p>
                            </>
                         )}
                    </div>
                     <Separator />
                    <div>
                        <h4 className="font-semibold mb-2">Items:</h4>
                        <div className="space-y-2">
                            {viewingOrderDetails.items.map(item => <OrderItemDetailsCard key={item.id} item={item} />)}
                        </div>
                    </div>
                </div>
            )}
            <DialogFooter>
                <DialogClose asChild><Button type="button" variant="outline">Close</Button></DialogClose>
            </DialogFooter>
        </DialogContent>
      </Dialog>

    </div>
  );
}

# === app/admin/artists/page.tsx ===
'use client';

import React, { useState, useEffect, useMemo } from 'react';
import { useForm, SubmitHandler } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { toast } from 'sonner';
import {
  ColumnDef,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
  SortingState,
  ColumnFiltersState,
  Row,
  Column,
  HeaderGroup,
  Cell,
} from '@tanstack/react-table';

import { Artist as ArtistType, ApiErrorResponse } from '@/lib/types';
import { apiClient } from '@/lib/api';
import { cn } from '@/lib/utils';

import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Checkbox } from '@/components/ui/checkbox';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogClose,
} from '@/components/ui/dialog';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Badge } from '@/components/ui/badge';
import { Skeleton } from '@/components/ui/skeleton';
import { PlusCircle, Edit3, Trash2, Search, ArrowUpDown, Loader2, Users, PackageIcon } from 'lucide-react';

const artistFormSchema = z.object({
  name: z.string().min(1, "Name is required"),
  bio: z.string().optional().nullable(),
  is_active: z.boolean().default(true),
});

type ArtistFormValues = z.infer<typeof artistFormSchema>;
type ArtistFormInput = z.input<typeof artistFormSchema>;

interface ArtistApiPayload {
    name: string;
    bio?: string | null;
    is_active: boolean;
}

export default function AdminArtistsPage() {
  const [artists, setArtists] = useState<ArtistType[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [editingArtist, setEditingArtist] = useState<ArtistType | null>(null);
  const [showFormDialog, setShowFormDialog] = useState(false);
  const [artistToDelete, setArtistToDelete] = useState<ArtistType | null>(null);

  const [sorting, setSorting] = useState<SortingState>([]);
  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);
  const [globalFilter, setGlobalFilter] = useState('');


  const form = useForm<ArtistFormInput, any, ArtistFormValues>({
    resolver: zodResolver(artistFormSchema),
    defaultValues: {
      name: "",
      bio: null,
      is_active: true,
    },
  });

  const fetchArtists = async () => {
    setIsLoading(true);
    try {
      const fetchedArtists = await apiClient.get<ArtistType[]>('/artists/', { needsAuth: true });
      setArtists(fetchedArtists || []);
    } catch (error) {
      console.error("Failed to fetch artists:", error);
      toast.error("Could not load artists.");
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchArtists();
  }, []);

  const handleFormSubmit: SubmitHandler<ArtistFormValues> = async (values) => {
    setIsSubmitting(true);
    const payload: ArtistApiPayload = {
        ...values,
        bio: values.bio || null,
    };

    try {
      if (editingArtist) {
        await apiClient.patch<ArtistType>(`/artists/${editingArtist.id}`, payload, { needsAuth: true });
        toast.success("Artist updated successfully!");
      } else {
        await apiClient.post<ArtistType>('/artists/', payload, { needsAuth: true });
        toast.success("Artist created successfully!");
      }
      setShowFormDialog(false);
      setEditingArtist(null);
      form.reset({ name: "", bio: null, is_active: true });
      fetchArtists();
    } catch (error: any) {
      const apiError = error as ApiErrorResponse;
      toast.error(apiError.message || "An error occurred.");
      if (apiError.errors) {
        Object.entries(apiError.errors).forEach(([field, messages]) => {
          form.setError(field as keyof ArtistFormInput, { type: "server", message: messages.join(", ") });
        });
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  const openEditDialog = (artist: ArtistType) => {
    setEditingArtist(artist);
    form.reset({
      name: artist.name,
      bio: artist.bio || null,
      is_active: artist.is_active === undefined ? true : artist.is_active,
    });
    setShowFormDialog(true);
  };

  const openNewDialog = () => {
    setEditingArtist(null);
    form.reset({ name: "", bio: null, is_active: true });
    setShowFormDialog(true);
  };

  const handleDeleteArtist = async () => {
    if (!artistToDelete) return;
    setIsSubmitting(true);
    try {
      await apiClient.delete(`/artists/${artistToDelete.id}`, { needsAuth: true });
      toast.success("Artist deleted successfully! Associated artworks were also deleted.");
      setArtistToDelete(null);
      fetchArtists();
    } catch (error: any) {
      toast.error(error.message || "Failed to delete artist.");
    } finally {
      setIsSubmitting(false);
    }
  };

  const columns: ColumnDef<ArtistType>[] = useMemo(() => [
    {
      accessorKey: "name",
      header: ({ column }: { column: Column<ArtistType, unknown> }) => (
        <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}>
          Name <ArrowUpDown className="ml-2 h-4 w-4" />
        </Button>
      ),
      cell: ({ row }: { row: Row<ArtistType> }) => (
        <div className="font-medium">{row.original.name}</div>
      )
    },
    {
      accessorKey: "bio",
      header: "Bio",
      cell: ({ row }: { row: Row<ArtistType> }) => (
        <p className="truncate max-w-xs text-sm text-muted-foreground">{row.original.bio || "N/A"}</p>
      ),
    },
    {
      accessorKey: "artworks_count",
      header: ({ column }: { column: Column<ArtistType, unknown> }) => (
        <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}>
          Artworks <ArrowUpDown className="ml-2 h-4 w-4" />
        </Button>
      ),
      cell: ({ row }: { row: Row<ArtistType> }) => (
        <div className="flex items-center justify-center">
            <PackageIcon className="h-4 w-4 mr-1.5 text-muted-foreground"/>
            {row.original.artworks_count !== undefined ? row.original.artworks_count : (row.original.artworks?.length || 0)}
        </div>
      ),
      sortingFn: 'alphanumeric',
    },
    {
      accessorKey: "is_active",
      header: "Status",
      cell: ({ row }: { row: Row<ArtistType> }) => (
        <Badge variant={row.original.is_active ? "default" : "secondary"}>
          {row.original.is_active ? "Active" : "Inactive"}
        </Badge>
      ),
       filterFn: (row, id, value) => value.includes(row.getValue(id)),
    },
    {
      id: "actions",
      header: () => <div className="text-right">Actions</div>,
      cell: ({ row }: { row: Row<ArtistType> }) => (
        <div className="flex space-x-2 justify-end">
          <Button variant="ghost" size="icon" onClick={() => openEditDialog(row.original)} title="Edit">
            <Edit3 className="h-4 w-4" />
          </Button>
          <Button variant="ghost" size="icon" onClick={() => setArtistToDelete(row.original)} title="Delete">
            <Trash2 className="h-4 w-4 text-destructive" />
          </Button>
        </div>
      ),
    },
  ], []); 

  const table = useReactTable({
    data: artists,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    onGlobalFilterChange: setGlobalFilter,
    state: {
      sorting,
      columnFilters,
      globalFilter,
    },
  });

   if (isLoading && artists.length === 0) {
    return (
        <div className="space-y-4">
            <div className="flex justify-between items-center">
                 <h1 className="text-2xl font-semibold">Manage Artists</h1>
                <Skeleton className="h-10 w-36" />
            </div>
            <Skeleton className="h-10 w-full" />
            {Array.from({length: 3}).map((_, i) => <Skeleton key={i} className="h-16 w-full" />)}
        </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold tracking-tight flex items-center"><Users className="mr-3 h-6 w-6"/>Manage Artists</h1>
        <Button onClick={openNewDialog}>
          <PlusCircle className="mr-2 h-4 w-4" /> Add New Artist
        </Button>
      </div>

      <div className="flex items-center py-4">
        <div className="relative w-full max-w-sm">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search artists by name or bio..."
            value={globalFilter ?? ""}
            onChange={(event) => setGlobalFilter(event.target.value)}
            className="pl-10"
          />
        </div>
      </div>

      <div className="rounded-md border bg-card">
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup: HeaderGroup<ArtistType>) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <TableHead key={header.id} className="whitespace-nowrap">
                    {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}
                  </TableHead>
                ))}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows?.length ? (
              table.getRowModel().rows.map((row: Row<ArtistType>) => (
                <TableRow key={row.id}>
                  {row.getVisibleCells().map((cell: Cell<ArtistType, unknown>) => (
                    <TableCell key={cell.id}>
                      {flexRender(cell.column.columnDef.cell, cell.getContext())}
                    </TableCell>
                  ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={columns.length} className="h-24 text-center">
                  No artists found.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>

      <div className="flex items-center justify-end space-x-2 py-4">
        <Button variant="outline" size="sm" onClick={() => table.previousPage()} disabled={!table.getCanPreviousPage()}>Previous</Button>
        <Button variant="outline" size="sm" onClick={() => table.nextPage()} disabled={!table.getCanNextPage()}>Next</Button>
      </div>

      <Dialog open={showFormDialog} onOpenChange={(isOpen) => {
          setShowFormDialog(isOpen);
          if (!isOpen) { form.reset({ name: "", bio: null, is_active: true }); setEditingArtist(null); }
      }}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>{editingArtist ? 'Edit Artist' : 'Add New Artist'}</DialogTitle>
          </DialogHeader>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(handleFormSubmit)} className="space-y-4 py-4 max-h-[70vh] overflow-y-auto pr-2">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Artist Name</FormLabel>
                    <FormControl><Input placeholder="e.g., Leonardo da Vinci" {...field} /></FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="bio"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Biography (Optional)</FormLabel>
                    <FormControl><Textarea placeholder="Brief bio of the artist..." {...field} value={field.value || ""} className="min-h-[100px]" /></FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
                <FormField
                  control={form.control}
                  name="is_active"
                  render={({ field }) => (
                    <FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4 shadow-sm">
                        <FormControl><Checkbox checked={field.value} onCheckedChange={field.onChange}/></FormControl>
                        <div className="space-y-1 leading-none">
                            <FormLabel className="font-normal">Active</FormLabel>
                            <FormDescription>Uncheck to hide this artist and their artworks from public view.</FormDescription>
                        </div>
                    </FormItem>
                  )}
                />
              <DialogFooter className="pt-4">
                <DialogClose asChild><Button type="button" variant="outline">Cancel</Button></DialogClose>
                <Button type="submit" disabled={isSubmitting}>
                  {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                  {editingArtist ? 'Save Changes' : 'Create Artist'}
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>

      <AlertDialog open={!!artistToDelete} onOpenChange={(isOpen) => !isOpen && setArtistToDelete(null)}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This action cannot be undone. This will permanently delete the artist "{artistToDelete?.name}".
              Associated artworks will also be deleted.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel onClick={() => setArtistToDelete(null)}>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={handleDeleteArtist}
              disabled={isSubmitting}
              className={cn(isSubmitting && "opacity-50 cursor-not-allowed", "bg-destructive hover:bg-destructive/90")}
            >
              {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
}

# === app/admin/artworks/page.tsx ===
// === app/admin/artworks/page.tsx ===
'use client';

import React, { useState, useEffect, useMemo, useCallback } from 'react'; // Added useCallback
import Link from 'next/link';
import Image from 'next/image';
import { useForm, SubmitHandler, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { toast } from 'sonner';
import {
  ColumnDef,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
  SortingState,
  ColumnFiltersState,
  Row,
  Column,
  HeaderGroup,
  Cell,
} from '@tanstack/react-table';

import { Artwork as ArtworkType, Artist as ArtistType, ApiErrorResponse } from '@/lib/types';
import { apiClient } from '@/lib/api';
import { formatPrice, cn } from '@/lib/utils';

import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Checkbox } from '@/components/ui/checkbox';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogClose,
} from '@/components/ui/dialog';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Badge } from '@/components/ui/badge';
import { Skeleton } from '@/components/ui/skeleton';
import { PlusCircle, Edit3, Trash2, ImageOff, Search, ArrowUpDown, Loader2, ExternalLink, UploadCloud } from 'lucide-react';

const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB
const ACCEPTED_IMAGE_TYPES = ["image/jpeg", "image/jpg", "image/png", "image/gif"];

const artworkFormSchema = z.object({
  name: z.string().min(1, "Name is required"),
  artist_id: z.string().min(1, "Artist selection is required."),
  price: z.coerce.number().min(0, "Price must be non-negative"),
  stock_quantity: z.coerce.number().int().min(0, "Stock must be a non-negative integer"),
  description: z.string().optional().nullable(),
  is_active: z.boolean().default(true),
  image_file: z.instanceof(File)
    .optional()
    .nullable()
    .refine(
      (file) => !file || file.size <= MAX_FILE_SIZE,
      `Max file size is 5MB.`
    )
    .refine(
      (file) => !file || ACCEPTED_IMAGE_TYPES.includes(file.type),
      "Only .jpg, .jpeg, .png and .gif formats are supported."
    ),
  current_image_url: z.string().optional().nullable(),
});

type ArtworkFormValues = z.infer<typeof artworkFormSchema>;
type ArtworkFormInput = z.input<typeof artworkFormSchema>;


const placeholderImage = "/placeholder-image.svg";

export default function AdminArtworksPage() {
  const [artworks, setArtworks] = useState<ArtworkType[]>([]);
  const [artists, setArtists] = useState<ArtistType[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [editingArtwork, setEditingArtwork] = useState<ArtworkType | null>(null);
  const [showFormDialog, setShowFormDialog] = useState(false);
  const [artworkToDelete, setArtworkToDelete] = useState<ArtworkType | null>(null);
  const [previewImage, setPreviewImage] = useState<string | null>(null);


  const [sorting, setSorting] = useState<SortingState>([]);
  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);
  const [globalFilter, setGlobalFilter] = useState('');


  const form = useForm<ArtworkFormInput, any, ArtworkFormValues>({
    resolver: zodResolver(artworkFormSchema),
    defaultValues: {
      name: "",
      artist_id: "",
      price: 0,
      stock_quantity: 0,
      description: null,
      is_active: true,
      image_file: null,
      current_image_url: null,
    },
  });

  // Define fetchArtworksAndArtists at the component scope
  const fetchArtworksAndArtists = useCallback(async () => {
    setIsLoading(true);
    try {
      const [fetchedArtworks, fetchedArtists] = await Promise.all([
        apiClient.get<ArtworkType[]>('/artworks/', { needsAuth: true }),
        apiClient.get<ArtistType[]>('/artists/', { needsAuth: true }),
      ]);
      setArtworks(fetchedArtworks || []);
      setArtists(fetchedArtists || []);

      // This logic will run after artists are fetched.
      // Important: Check if the form is for a NEW artwork and artist_id is not already set
      // (e.g., by opening an edit dialog which would have its own artist_id).
      if (fetchedArtists && fetchedArtists.length > 0 && !editingArtwork && !form.getValues('artist_id')) {
        form.setValue('artist_id', fetchedArtists[0].id, { shouldValidate: true });
      }
    } catch (error) {
      console.error("Failed to fetch artworks or artists:", error);
      toast.error("Could not load data. Ensure you are logged in as admin.");
    } finally {
      setIsLoading(false);
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [form, editingArtwork]); // Added form and editingArtwork to dependencies of useCallback

  useEffect(() => {
    fetchArtworksAndArtists();
  }, [fetchArtworksAndArtists]); // Call it on mount


  const handleFormSubmit: SubmitHandler<ArtworkFormValues> = async (values) => {
    setIsSubmitting(true);

    if (!editingArtwork && !values.image_file) {
      form.setError("image_file", { type: "manual", message: "Artwork image is required for new artworks." });
      setIsSubmitting(false);
      return;
    }
    if (editingArtwork && !values.image_file && !values.current_image_url) {
        form.setError("image_file", { type: "manual", message: "An image is required. Please upload a new image." });
        setIsSubmitting(false);
        return;
    }
    if (!values.artist_id) {
        form.setError("artist_id", {type: "manual", message: "Artist is required."});
        setIsSubmitting(false);
        return;
    }

    const formData = new FormData();
    formData.append('name', values.name);
    formData.append('artist_id', values.artist_id); 
    formData.append('price', values.price.toString());
    formData.append('stock_quantity', values.stock_quantity.toString());
    formData.append('is_active', String(values.is_active));
    if (values.description) {
      formData.append('description', values.description);
    }

    if (values.image_file) {
      formData.append('image_file', values.image_file);
    } else if (editingArtwork && values.current_image_url) {
      const mediaBase = `${process.env.NEXT_PUBLIC_API_URL?.replace('/api', '')}/media/`;
      let relativePath = values.current_image_url;
      if (values.current_image_url?.startsWith(mediaBase)) {
        relativePath = values.current_image_url.substring(mediaBase.length);
      }
      formData.append('image_url', relativePath || '');
    }

    try {
      if (editingArtwork) {
        await apiClient.patch<ArtworkType>(
          `/artworks/${editingArtwork.id}`,
          formData,
          { needsAuth: true, isFormData: true }
        );
        toast.success("Artwork updated successfully!");
      } else {
        await apiClient.post<ArtworkType>(
          '/artworks/',
          formData,
          { needsAuth: true, isFormData: true }
        );
        toast.success("Artwork created successfully!");
      }

      setShowFormDialog(false);
      setEditingArtwork(null);
      form.reset({
        name: "", artist_id: artists.length > 0 ? artists[0].id : "", price: 0,
        stock_quantity: 0, description: null, is_active: true,
        image_file: null, current_image_url: null,
      });
      setPreviewImage(null);
      fetchArtworksAndArtists(); // Refresh list
    } catch (error: any) {
      const apiError = error as ApiErrorResponse;
      toast.error(apiError.message || "An error occurred.");
      if (apiError.errors) {
        Object.entries(apiError.errors).forEach(([field, messages]) => {
          console.error(`Server error for ${field}: ${messages.join(", ")}`);
           if (Object.keys(form.getValues()).includes(field)) {
             form.setError(field as keyof ArtworkFormInput, { type: "server", message: messages.join(", ") });
           }
        });
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  const openEditDialog = (artwork: ArtworkType) => {
    setEditingArtwork(artwork);
    setPreviewImage(artwork.image_url || null);
    form.reset({ 
      name: artwork.name,
      artist_id: artwork.artist?.id || "", // Use ID from the nested artist object, fallback to "" if artist/artist.id is missing
      price: parseFloat(artwork.price),
      stock_quantity: artwork.stock_quantity,
      description: artwork.description || null,
      is_active: artwork.is_active === undefined ? true : artwork.is_active,
      image_file: null,
      current_image_url: artwork.image_url || null,
    });
    setShowFormDialog(true);
  };

  const openNewDialog = () => {
    setEditingArtwork(null);
    setPreviewImage(null);
    form.reset({
        name: "",
        artist_id: artists.length > 0 ? artists[0].id : "",
        price: 0,
        stock_quantity: 0,
        description: null,
        is_active: true,
        image_file: null,
        current_image_url: null,
    });
    setShowFormDialog(true);
  };

  const handleDeleteArtwork = async () => {
    if (!artworkToDelete) return;
    setIsSubmitting(true);
    try {
      await apiClient.delete(`/artworks/${artworkToDelete.id}`, { needsAuth: true });
      toast.success("Artwork deleted successfully!");
      setArtworkToDelete(null);
      fetchArtworksAndArtists();
    } catch (error: any) {
      toast.error(error.message || "Failed to delete artwork.");
    } finally {
      setIsSubmitting(false);
    }
  };

  const columns: ColumnDef<ArtworkType>[] = useMemo(() => [
    {
      accessorKey: "image_url",
      header: "Image",
      cell: ({ row }: { row: Row<ArtworkType> }) => {
        const artwork = row.original;
        return (
          <div className="relative h-16 w-16 flex-shrink-0 overflow-hidden rounded-md border bg-muted">
            <Image
              src={artwork.image_url || placeholderImage}
              alt={artwork.name}
              fill
              sizes="64px"
              className="object-cover"
              onError={(e) => { (e.target as HTMLImageElement).src = placeholderImage; }}
            />
            {!artwork.image_url && <ImageOff className="absolute inset-0 m-auto h-6 w-6 text-muted-foreground" />}
          </div>
        );
      },
      enableSorting: false,
    },
    {
      accessorKey: "name",
      header: ({ column }: { column: Column<ArtworkType, unknown> }) => (
        <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}>
          Name <ArrowUpDown className="ml-2 h-4 w-4" />
        </Button>
      ),
      cell: ({ row }: { row: Row<ArtworkType> }) => (
        <Link href={`/artworks/${row.original.id}`} target="_blank" className="hover:underline font-medium">
          {row.original.name} <ExternalLink className="inline h-3 w-3 ml-1" />
        </Link>
      ),
    },
    {
      accessorKey: "artist.name",
      header: ({ column }: { column: Column<ArtworkType, unknown> }) => (
        <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}>
          Artist <ArrowUpDown className="ml-2 h-4 w-4" />
        </Button>
      ),
      cell: ({ row }: { row: Row<ArtworkType> }) => row.original.artist?.name || 'N/A',
    },
    {
      accessorKey: "price",
      header: ({ column }: { column: Column<ArtworkType, unknown> }) => (
        <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}>
          Price <ArrowUpDown className="ml-2 h-4 w-4" />
        </Button>
      ),
      cell: ({ row }: { row: Row<ArtworkType> }) => formatPrice(row.original.price),
    },
    {
      accessorKey: "stock_quantity",
      header: "Stock",
      cell: ({ row }: { row: Row<ArtworkType> }) => row.original.stock_quantity,
    },
    {
      accessorKey: "is_active",
      header: "Status",
      cell: ({ row }: { row: Row<ArtworkType> }) => (
        <Badge variant={row.original.is_active ? "default" : "secondary"}>
          {row.original.is_active ? "Active" : "Inactive"}
        </Badge>
      ),
      filterFn: (row: Row<ArtworkType>, id: string, value: any) => value.includes(row.getValue(id))
    },
    {
      id: "actions",
      header: () => <div className="text-right">Actions</div>,
      cell: ({ row }: { row: Row<ArtworkType> }) => {
        const artwork = row.original;
        return (
          <div className="flex space-x-2 justify-end">
            <Button variant="ghost" size="icon" onClick={() => openEditDialog(artwork)} title="Edit">
              <Edit3 className="h-4 w-4" />
            </Button>
            <Button variant="ghost" size="icon" onClick={() => setArtworkToDelete(artwork)} title="Delete">
              <Trash2 className="h-4 w-4 text-destructive" />
            </Button>
          </div>
        );
      },
    },
  ], [artists]); // artists dependency is important for the Select dropdown options

  const table = useReactTable({
    data: artworks,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    onGlobalFilterChange: setGlobalFilter,
    globalFilterFn: (row, columnId, filterValue) => { 
      const artworkName = row.getValue('name') as string;
      const artistName = row.original.artist?.name || ''; 
      return artworkName.toLowerCase().includes(filterValue.toLowerCase()) ||
             artistName.toLowerCase().includes(filterValue.toLowerCase());
    },
    state: {
      sorting,
      columnFilters,
      globalFilter,
    },
  });

  if (isLoading && artworks.length === 0) {
    return (
        <div className="space-y-4">
            <div className="flex justify-between items-center">
                <h1 className="text-2xl font-semibold">Manage Artworks</h1>
                <Skeleton className="h-10 w-32" />
            </div>
            <Skeleton className="h-10 w-full" />
            {Array.from({length: 5}).map((_, i) => <Skeleton key={i} className="h-16 w-full" />)}
        </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold tracking-tight">Manage Artworks</h1>
        <Button onClick={openNewDialog}>
          <PlusCircle className="mr-2 h-4 w-4" /> Add New Artwork
        </Button>
      </div>

      <div className="flex items-center py-4">
        <div className="relative w-full max-w-sm">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search by artwork or artist name..."
            value={globalFilter ?? ""}
            onChange={(event) => setGlobalFilter(event.target.value)}
            className="pl-10"
          />
        </div>
      </div>

      <div className="rounded-md border bg-card">
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup: HeaderGroup<ArtworkType>) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <TableHead key={header.id} className="whitespace-nowrap">
                    {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}
                  </TableHead>
                ))}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows?.length ? (
              table.getRowModel().rows.map((row: Row<ArtworkType>) => (
                <TableRow key={row.id} data-state={row.getIsSelected() && "selected"}>
                  {row.getVisibleCells().map((cell: Cell<ArtworkType, unknown>) => (
                    <TableCell key={cell.id}>
                      {flexRender(cell.column.columnDef.cell, cell.getContext())}
                    </TableCell>
                  ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={columns.length} className="h-24 text-center">
                  No artworks found {globalFilter && `for query "${globalFilter}"`}.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>

      <div className="flex items-center justify-end space-x-2 py-4">
        <Button variant="outline" size="sm" onClick={() => table.previousPage()} disabled={!table.getCanPreviousPage()}>Previous</Button>
        <Button variant="outline" size="sm" onClick={() => table.nextPage()} disabled={!table.getCanNextPage()}>Next</Button>
      </div>

      <Dialog open={showFormDialog} onOpenChange={(isOpen) => {
          setShowFormDialog(isOpen);
          if (!isOpen) {
              form.reset({
                name: "", artist_id: artists.length > 0 ? artists[0].id : "", price: 0,
                stock_quantity: 0, description: null, is_active: true,
                image_file: null, current_image_url: null,
              });
              setEditingArtwork(null);
              setPreviewImage(null);
          }
      }}>
        <DialogContent className="sm:max-w-lg">
          <DialogHeader>
            <DialogTitle>{editingArtwork ? 'Edit Artwork' : 'Add New Artwork'}</DialogTitle>
            <DialogDescription>
              {editingArtwork ? 'Update the details of the artwork.' : 'Fill in the details for the new artwork.'}
            </DialogDescription>
          </DialogHeader>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(handleFormSubmit)} className="space-y-4 py-4 max-h-[70vh] overflow-y-auto pr-2">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Name</FormLabel>
                    <FormControl><Input placeholder="Artwork Title" {...field} /></FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <Controller
                control={form.control}
                name="artist_id"
                render={({ field: { onChange, value, ref }, fieldState: { error } }) => (
                  <FormItem>
                    <FormLabel>Artist</FormLabel>
                    <Select
                      onValueChange={onChange}
                      value={value || ""} // Ensure value is a string, defaulting to "" if null/undefined
                    >
                      <FormControl>
                        <SelectTrigger ref={ref} className={cn(error && "border-destructive")}>
                          <SelectValue placeholder="Select an artist" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {artists.length === 0 && !isLoading && <SelectItem value="no-artists" disabled>No artists loaded</SelectItem>}
                        {isLoading && artists.length === 0 && <SelectItem value="loading" disabled>Loading artists...</SelectItem>}
                        {artists.map((artist) => (
                          <SelectItem key={artist.id} value={artist.id}>
                            {artist.name} {artist.is_active === false && "(Inactive)"}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage /> {/* This will display Zod validation messages */}
                  </FormItem>
                )}
              />
              <div className="grid grid-cols-2 gap-4">
                <FormField
                    control={form.control}
                    name="price"
                    render={({ field }) => (
                    <FormItem>
                        <FormLabel>Price (Ksh)</FormLabel>
                        <FormControl><Input type="number" step="0.01" placeholder="e.g., 1500.00" {...field} /></FormControl>
                        <FormMessage />
                    </FormItem>
                    )}
                />
                <FormField
                    control={form.control}
                    name="stock_quantity"
                    render={({ field }) => (
                    <FormItem>
                        <FormLabel>Stock Quantity</FormLabel>
                        <FormControl><Input type="number" placeholder="e.g., 10" {...field} /></FormControl>
                        <FormMessage />
                    </FormItem>
                    )}
                />
              </div>
              <FormField
                control={form.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Description</FormLabel>
                    <FormControl><Textarea placeholder="Describe the artwork..." {...field} value={field.value || ""} className="min-h-[100px]" /></FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="image_file"
                render={({ field: { onChange, value: fileValue, ...restFieldProps } }) => {
                  const currentImageDisplay = editingArtwork && form.getValues('current_image_url') && !fileValue;
                  return (
                    <FormItem>
                      <FormLabel>Artwork Image</FormLabel>
                      <FormControl>
                        <div className="flex items-center space-x-3">
                          <label htmlFor="image-upload" className={cn(
                              "flex-grow cursor-pointer rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background",
                              "file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground",
                              "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
                              "disabled:cursor-not-allowed disabled:opacity-50 hover:bg-accent hover:text-accent-foreground",
                              form.formState.errors.image_file && "border-destructive"
                          )}>
                            <div className="flex items-center">
                              <UploadCloud className="mr-2 h-4 w-4" />
                              <span>{fileValue ? fileValue.name : (currentImageDisplay ? 'Change image' : 'Upload image')}</span>
                            </div>
                            <Input
                              id="image-upload"
                              type="file"
                              className="sr-only"
                              accept={ACCEPTED_IMAGE_TYPES.join(",")}
                              onChange={(e) => {
                                const file = e.target.files?.[0] || null;
                                onChange(file);
                                if (file) {
                                  const reader = new FileReader();
                                  reader.onloadend = () => {
                                    setPreviewImage(reader.result as string);
                                  };
                                  reader.readAsDataURL(file);
                                } else {
                                  setPreviewImage(form.getValues('current_image_url') || null);
                                }
                              }}
                              {...restFieldProps}
                            />
                          </label>
                        </div>
                      </FormControl>
                     <FormDescription>
                        {editingArtwork && currentImageDisplay ? "Upload a new file to replace the current image." : 
                         !editingArtwork ? "Image is required for new artworks. " : ""}
                        Max 5MB. JPG, PNG, GIF.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                  );
                }}
              />

            {(previewImage) && (
              <div className="mt-2 space-y-2">
                <p className="text-xs text-muted-foreground">
                  {form.watch('image_file') ? "New image preview:" : (editingArtwork ? "Current image:" : "Image preview:")}
                </p>
                <Image
                  src={previewImage || placeholderImage}
                  alt="Artwork image preview"
                  width={128}
                  height={128}
                  className="rounded border object-cover h-32 w-32"
                  onError={(e) => { (e.target as HTMLImageElement).src = placeholderImage; }}
                />
              </div>
            )}


               <FormField
                control={form.control}
                name="is_active"
                render={({ field }) => (
                  <FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4 shadow-sm">
                    <FormControl>
                      <Checkbox checked={field.value} onCheckedChange={field.onChange} />
                    </FormControl>
                    <div className="space-y-1 leading-none">
                      <FormLabel>Active</FormLabel>
                      <FormDescription>
                        Uncheck to hide this artwork from the public store.
                      </FormDescription>
                    </div>
                  </FormItem>
                )}
              />
              <DialogFooter className="pt-4">
                <DialogClose asChild>
                    <Button type="button" variant="outline">Cancel</Button>
                </DialogClose>
                <Button type="submit" disabled={isSubmitting}>
                  {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                  {editingArtwork ? 'Save Changes' : 'Create Artwork'}
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>

      <AlertDialog open={!!artworkToDelete} onOpenChange={(isOpen) => !isOpen && setArtworkToDelete(null)}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This action cannot be undone. This will permanently delete the artwork
              "{artworkToDelete?.name}".
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel onClick={() => setArtworkToDelete(null)}>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={handleDeleteArtwork}
              disabled={isSubmitting}
              className={cn(isSubmitting && "opacity-50 cursor-not-allowed", "bg-destructive hover:bg-destructive/90")}
            >
              {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
}

# === app/cart/page.tsx ===
// === app/cart/page.tsx ===
'use client';

import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { useRouter } from 'next/navigation';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { toast } from 'sonner';

import { useCart } from '@/contexts/CartContext';
import { useAuth } from '@/contexts/AuthContext';
import { formatPrice, cn } from '@/lib/utils';
import {
    ApiErrorResponse,
    CartItem as CartItemType,
    StkPushInitiationResponse,
    DeliveryOption as DeliveryOptionType, // Import DeliveryOptionType
    PaymentTransactionStatusResponse
} from '@/lib/types';
import { apiClient } from '@/lib/api';

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Separator } from "@/components/ui/separator";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel, // <--- MAKE SURE FormLabel IS HERE if you use it for the Mpesa phone field
  FormMessage,
} from "@/components/ui/form";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Label } from "@/components/ui/label"

import { ShoppingCart, Trash2, Minus, Plus, Loader2, ImageOff, Info, CheckCircle, XCircle, Truck, Package } from 'lucide-react';


const checkoutSchema = z.object({
  phoneNumber: z.string()
    .min(1, "Phone number is required")
    .length(12, "Phone number must be 12 digits (e.g. 2547XXXXXXXX)")
    .startsWith("254", "Phone number must start with 254")
    .regex(/^[0-9]+$/, "Phone number must contain only digits"),
  // deliveryOptionId is now handled by state, not directly in this form schema for Mpesa part
});
type CheckoutFormValues = z.infer<typeof checkoutSchema>;

interface CartItemProps {
  item: CartItemType;
  onUpdateQuantity: (itemId: string, newQuantity: number) => Promise<void>;
  onRemoveItem: (itemId: string) => Promise<void>;
  isUpdating: boolean;
}

function CartItem({ item, onUpdateQuantity, onRemoveItem, isUpdating }: CartItemProps) {
  const [isQuantityUpdating, setIsQuantityUpdating] = useState(false);
  const [isRemoving, setIsRemoving] = useState(false);

  const handleQuantityChange = async (newQuantity: number) => {
    if (newQuantity < 1 || isQuantityUpdating || isUpdating) return;
    if (newQuantity > item.artwork.stock_quantity) {
        toast.error(`Only ${item.artwork.stock_quantity} items available for "${item.artwork.name}".`);
        return;
    }
    setIsQuantityUpdating(true);
    try {
      await onUpdateQuantity(item.id, newQuantity);
    } finally {
      setIsQuantityUpdating(false);
    }
  };

  const handleRemove = async () => {
    if (isRemoving || isUpdating) return;
    setIsRemoving(true);
    try {
      await onRemoveItem(item.id);
    } finally {
      setIsRemoving(false);
    }
  };

  const placeholderImage = "/placeholder-image.svg";

  return (
    <div className="flex items-start sm:items-center space-x-3 sm:space-x-4 py-4 border-b last:border-b-0 flex-col sm:flex-row">
      <div className="relative h-20 w-20 sm:h-24 sm:w-24 flex-shrink-0 overflow-hidden rounded-md border bg-muted mb-2 sm:mb-0">
        <Image
          src={item.artwork.image_url || placeholderImage}
          alt={item.artwork.name}
          fill
          sizes="(max-width: 640px) 20vw, 96px"
          className="object-cover"
          onError={(e) => {
            (e.target as HTMLImageElement).srcset = placeholderImage;
            (e.target as HTMLImageElement).src = placeholderImage;
          }}
        />
         {!item.artwork.image_url && <ImageOff className="absolute inset-0 m-auto h-8 w-8 text-muted-foreground" />}
      </div>

      <div className="flex-1 space-y-1 min-w-0">
        <Link href={`/artworks/${item.artwork.id}`} className="font-medium hover:text-primary transition-colors text-base sm:text-lg line-clamp-2">
          {item.artwork.name}
        </Link>
        <p className="text-xs sm:text-sm text-muted-foreground">By: {item.artwork.artist.name}</p>
        <p className="text-xs sm:text-sm font-medium">{formatPrice(item.artwork.price)}</p>
      </div>

      <div className="flex flex-row sm:flex-col items-center sm:items-end space-x-2 sm:space-x-0 sm:space-y-1 mt-2 sm:mt-0">
         <div className="flex items-center border rounded-md">
            <Button
              variant="ghost"
              size="icon"
              className="h-7 w-7 sm:h-8 sm:w-8"
              onClick={() => handleQuantityChange(item.quantity - 1)}
              disabled={item.quantity <= 1 || isQuantityUpdating || isUpdating}
              aria-label="Decrease quantity"
            >
              <Minus className="h-3 w-3 sm:h-4 sm:w-4" />
            </Button>
            <span className="w-7 text-center text-xs sm:text-sm font-medium">
                {isQuantityUpdating ? <Loader2 className="h-3 w-3 sm:h-4 sm:w-4 animate-spin mx-auto" /> : item.quantity}
            </span>
            <Button
              variant="ghost"
              size="icon"
              className="h-7 w-7 sm:h-8 sm:w-8"
              onClick={() => handleQuantityChange(item.quantity + 1)}
              disabled={isQuantityUpdating || isUpdating || item.quantity >= item.artwork.stock_quantity}
              aria-label="Increase quantity"
            >
              <Plus className="h-3 w-3 sm:h-4 sm:w-4" />
            </Button>
         </div>
        {item.artwork.stock_quantity > 0 && item.artwork.stock_quantity < 5 && (
            <p className="text-xs text-orange-600 mt-1">Only {item.artwork.stock_quantity} left</p>
        )}
        {item.artwork.stock_quantity === 0 && !isQuantityUpdating && (
             <p className="text-xs text-red-600 mt-1">Out of stock</p>
        )}
      </div>

      <div className="font-medium text-sm sm:text-base w-full sm:w-auto text-right sm:text-left mt-2 sm:mt-0">
        {formatPrice(parseFloat(item.artwork.price) * item.quantity)}
      </div>

      <Button
        variant="ghost"
        size="icon"
        className="h-7 w-7 sm:h-8 sm:w-8 text-muted-foreground hover:text-destructive ml-auto sm:ml-0"
        onClick={handleRemove}
        disabled={isRemoving || isUpdating}
        aria-label="Remove item"
      >
        {isRemoving ? <Loader2 className="h-3 w-3 sm:h-4 sm:w-4 animate-spin"/> : <Trash2 className="h-3 w-3 sm:h-4 sm:w-4" />}
      </Button>
    </div>
  );
}

export default function CartPage() {
  const {
    cart,
    isLoading: cartIsLoading,
    itemCount,
    totalPrice: cartSubtotal, // Renamed for clarity
    updateCartItem,
    removeFromCart,
    fetchCart,
    clearCart, // If user logs out while checkout polling active
  } = useCart();
  const { isAuthenticated, isLoading: authIsLoading, user } = useAuth();
  const router = useRouter();

  const [isStkFlowActive, setIsStkFlowActive] = useState(false);
  const [stkCheckoutId, setStkCheckoutId] = useState<string | null>(null);
  const [pollingMessage, setPollingMessage] = useState<string>("Please complete the M-Pesa payment on your phone.");
  const [paymentStatus, setPaymentStatus] = useState<PaymentTransactionStatusResponse['status'] | null>(null);

  // --- NEW STATES FOR DELIVERY ---
  const [deliveryOptions, setDeliveryOptions] = useState<DeliveryOptionType[]>([]);
  const [isLoadingDeliveryOptions, setIsLoadingDeliveryOptions] = useState(false);
  const [selectedDeliveryOptionId, setSelectedDeliveryOptionId] = useState<string | null>(null);
  const [deliveryType, setDeliveryType] = useState<'pickup' | 'delivery'>('pickup'); // Default to pickup
  // --- END NEW STATES ---

  const pollingIntervalRef = useRef<NodeJS.Timeout | null>(null);
  const pollingAttemptsRef = useRef<number>(0);

  const MAX_POLLING_ATTEMPTS = 24;
  const POLLING_INTERVAL_MS = 5000;

  const checkoutForm = useForm<CheckoutFormValues>({
    resolver: zodResolver(checkoutSchema),
    defaultValues: {
      phoneNumber: "",
    },
  });

  // Fetch delivery options on mount if authenticated
  useEffect(() => {
    if (isAuthenticated && !isStkFlowActive) {
      const fetchDeliveryOpts = async () => {
        setIsLoadingDeliveryOptions(true);
        try {
          const opts = await apiClient.get<DeliveryOptionType[]>('/delivery/options', { needsAuth: true });
          setDeliveryOptions(opts || []);
          // Auto-select "In Store Pick Up" if available
          const pickupOption = opts?.find(opt => opt.is_pickup);
          if (pickupOption) {
            setSelectedDeliveryOptionId(pickupOption.id);
            setDeliveryType('pickup');
          } else if (opts && opts.length > 0) {
            // If no pickup, select first available delivery option
            setSelectedDeliveryOptionId(opts[0].id);
            setDeliveryType('delivery');
          }
        } catch (error) {
          console.error("Failed to fetch delivery options:", error);
          toast.error("Could not load delivery options.");
        } finally {
          setIsLoadingDeliveryOptions(false);
        }
      };
      fetchDeliveryOpts();
    }
  }, [isAuthenticated, isStkFlowActive]);

  // Pre-fill phone number from user profile
  useEffect(() => {
    if (user?.address && !isStkFlowActive) {
      const potentialPhone = user.address.replace(/\D/g, ''); // Simplistic extraction
      if (potentialPhone.startsWith("254") && potentialPhone.length === 12) {
        checkoutForm.setValue("phoneNumber", potentialPhone);
      }
    }
  }, [user, checkoutForm, isStkFlowActive]);

  // Calculate delivery cost and grand total
  const selectedDeliveryOption = useMemo(() => {
    return deliveryOptions.find(opt => opt.id === selectedDeliveryOptionId);
  }, [deliveryOptions, selectedDeliveryOptionId]);

  const deliveryCost = useMemo(() => {
    if (!selectedDeliveryOption) return 0;
    return parseFloat(selectedDeliveryOption.price) || 0;
  }, [selectedDeliveryOption]);

  const grandTotal = useMemo(() => {
    return cartSubtotal + deliveryCost;
  }, [cartSubtotal, deliveryCost]);


  const stopPolling = useCallback(() => {
    if (pollingIntervalRef.current) {
      clearInterval(pollingIntervalRef.current);
      pollingIntervalRef.current = null;
    }
    pollingAttemptsRef.current = 0;
  }, []);

  const handlePaymentSuccess = useCallback((orderId?: string) => {
    stopPolling();
    setPaymentStatus('successful');
    let successMessage = "Payment successful! Your order has been placed.";
    if (selectedDeliveryOption?.is_pickup) {
        successMessage += ` You can pick up your order at: ${selectedDeliveryOption.description || 'Dynamic Mall, Shop M90, CBD, Nairobi.'}`;
    } else if (selectedDeliveryOption) {
        successMessage += ` It will be delivered via ${selectedDeliveryOption.name}.`;
    }

    setPollingMessage(successMessage);
    toast.success("Order Placed Successfully!", {
        description: successMessage.replace("Payment successful! Your order has been placed.", ""), // Shorter description
        duration: 15000,
        action: orderId ? { label: "View Order", onClick: () => router.push(`/orders/${orderId}`) } :
                         { label: "My Orders", onClick: () => router.push(`/orders`) },
    });
    fetchCart(); // To clear cart items from UI as backend clears them
  }, [stopPolling, router, fetchCart, selectedDeliveryOption]);

  const handlePaymentFailure = useCallback((message: string, finalStatus?: PaymentTransactionStatusResponse['status']) => {
    stopPolling();
    setPaymentStatus(finalStatus || 'failed_daraja');
    const displayMessage = message || "Payment failed or was cancelled. Please try again.";
    setPollingMessage(displayMessage);
    toast.error(displayMessage, { duration: 10000 });
  }, [stopPolling]);


  const pollPaymentStatus = useCallback(async (checkoutIdToPoll: string) => {
    if (!checkoutIdToPoll) {
        handlePaymentFailure("Cannot check payment status: Missing transaction ID.", "failed_processing_error");
        return;
    }
    if (pollingAttemptsRef.current >= MAX_POLLING_ATTEMPTS) {
      handlePaymentFailure("Payment confirmation timed out. If you paid, please check 'My Orders' or contact support.", 'failed_timeout');
      return;
    }

    pollingAttemptsRef.current += 1;
    setPollingMessage(`Checking payment status (attempt ${pollingAttemptsRef.current} of ${MAX_POLLING_ATTEMPTS})...`);

    try {
      const statusResponse = await apiClient.get<PaymentTransactionStatusResponse>(`/orders/status/${checkoutIdToPoll}`, { needsAuth: true });
      if (statusResponse) {
        setPaymentStatus(statusResponse.status);
        if (statusResponse.status === 'successful') {
          handlePaymentSuccess(statusResponse.order_id);
        } else if (['failed_stk_initiation', 'failed_stk_missing_id', 'failed_underpaid', 'failed_processing_error', 'cancelled_by_user', 'failed_daraja', 'failed_timeout', 'failed_missing_receipt'].includes(statusResponse.status)) {
          handlePaymentFailure(statusResponse.message || "Payment process encountered an issue.", statusResponse.status);
        } else if (statusResponse.status === 'not_found') {
           handlePaymentFailure("Transaction details not found. This could be a delay or an issue. Please contact support if payment was made.", 'not_found');
        } else {
           setPollingMessage(statusResponse.message || "Awaiting M-Pesa confirmation...");
        }
      } else {
        setPollingMessage("Could not retrieve payment status. Still trying...");
      }
    } catch (error: any) {
      console.error("Polling error:", error);
      if (error.message?.includes('401')) { // Handle potential token expiry during long polling
         toast.error("Session expired. Please log in and try again.");
         handlePaymentFailure("Authentication error during polling. Please log in again.", "failed_processing_error");
         clearCart(); // Clear local cart state
         router.push('/login?redirect=/cart');
      } else if (error.message?.includes('404') || error.message?.toLowerCase().includes('not found')) {
        handlePaymentFailure("Could not find this transaction to check its status. If you paid, contact support.", 'not_found');
      } else {
        setPollingMessage("Error checking status. Retrying...");
      }
    }
  }, [handlePaymentSuccess, handlePaymentFailure, router, clearCart]);


  useEffect(() => {
    const isFinalSuccessState = paymentStatus === 'successful';
    const isFinalNonSuccessState =
        paymentStatus === 'failed_stk_initiation' || paymentStatus === 'failed_stk_missing_id' ||
        paymentStatus === 'failed_underpaid' || paymentStatus === 'failed_processing_error' ||
        paymentStatus === 'cancelled_by_user' || paymentStatus === 'failed_daraja' ||
        paymentStatus === 'failed_timeout' || paymentStatus === 'failed_missing_receipt' ||
        paymentStatus === 'not_found';

    if (stkCheckoutId && isStkFlowActive && !isFinalSuccessState && !isFinalNonSuccessState && !pollingIntervalRef.current) {
      pollingAttemptsRef.current = 0;
      if (paymentStatus === null || paymentStatus === 'initiated' || paymentStatus === 'pending_stk_initiation') {
         setPollingMessage("Waiting for M-Pesa confirmation...");
      }
      pollPaymentStatus(stkCheckoutId); // Initial poll

      if (!pollingIntervalRef.current && stkCheckoutId) { // Ensure it wasn't stopped by initial poll
        pollingIntervalRef.current = setInterval(() => {
            if (stkCheckoutId) {
                 pollPaymentStatus(stkCheckoutId);
            } else {
                stopPolling();
            }
        }, POLLING_INTERVAL_MS);
      }
    } else if (isFinalSuccessState || isFinalNonSuccessState) {
        stopPolling();
    }
    return () => {
      stopPolling();
    };
  }, [stkCheckoutId, isStkFlowActive, paymentStatus, pollPaymentStatus, stopPolling]);


  const handleInitiateCheckout = async (data: CheckoutFormValues) => {
    if (!selectedDeliveryOptionId) {
        toast.error("Please select a delivery or pickup option.");
        return;
    }
    if (grandTotal <= 0) {
        toast.error("Total amount must be greater than zero to proceed with M-Pesa payment.");
        return;
    }

    setIsStkFlowActive(true);
    setStkCheckoutId(null);
    setPaymentStatus('initiated');
    setPollingMessage("Initiating M-Pesa payment...");

    try {
      const response = await apiClient.post<StkPushInitiationResponse>(
          '/orders/',
          {
            phone_number: data.phoneNumber,
            delivery_option_id: selectedDeliveryOptionId,
          },
          { needsAuth: true }
      );

      if (response && response.CheckoutRequestID) {
        toast.info("STK Push sent! Please authorize payment on your phone.", { duration: 10000 });
        setStkCheckoutId(response.CheckoutRequestID);
      } else {
        const message = response?.message || response?.ResponseDescription || "Failed to initiate payment. No Checkout ID received.";
        handlePaymentFailure(message, 'failed_stk_initiation');
      }
    } catch (error: any) {
        console.error("Checkout initiation failed:", error);
        handlePaymentFailure(error.message || "Failed to initiate M-Pesa payment.", 'failed_stk_initiation');
    }
  };

  const handleDeliveryTypeChange = (type: 'pickup' | 'delivery') => {
    setDeliveryType(type);
    if (type === 'pickup') {
        const pickupOpt = deliveryOptions.find(opt => opt.is_pickup);
        if (pickupOpt) setSelectedDeliveryOptionId(pickupOpt.id);
    } else {
        // If switching to delivery, and a delivery option is already selected, keep it.
        // Otherwise, select the first non-pickup option if available.
        const currentIsPickup = deliveryOptions.find(opt => opt.id === selectedDeliveryOptionId)?.is_pickup;
        if (selectedDeliveryOptionId === null || currentIsPickup) {
            const firstDeliveryOpt = deliveryOptions.find(opt => !opt.is_pickup);
            if (firstDeliveryOpt) setSelectedDeliveryOptionId(firstDeliveryOpt.id);
            else setSelectedDeliveryOptionId(null); // No delivery options available
        }
    }
  };


  // --- Render logic ---

  if (authIsLoading) {
    return <div className="flex justify-center items-center p-10 min-h-[300px]"><Loader2 className="h-8 w-8 animate-spin text-primary"/></div>;
  }
  if (!isAuthenticated) {
    return (
      <div className="text-center py-10 min-h-[300px] flex flex-col justify-center items-center">
        <ShoppingCart className="mx-auto h-12 w-12 text-muted-foreground" />
        <h2 className="mt-4 text-xl font-semibold">Your Cart is Empty</h2>
        <p className="mt-2 text-muted-foreground">Please log in to view or add items to your cart.</p>
        <Button asChild className="mt-4">
          <Link href="/login?redirect=/cart">Log In</Link>
        </Button>
      </div>
    );
  }

  if (isStkFlowActive) {
    let statusIcon = <Loader2 className="h-12 w-12 animate-spin text-primary" />;
    let statusTitle = "Processing Payment...";
    let alertVariantForComponent: "default" | "destructive" = "default";
    let successAlertClasses = "";

    if (paymentStatus === 'successful') {
        statusIcon = <CheckCircle className="h-12 w-12 text-green-600" />;
        statusTitle = "Payment Successful!";
        successAlertClasses = "bg-green-50 border-green-500 text-green-700 dark:bg-green-900/20 dark:border-green-700 dark:text-green-400";
    } else if (paymentStatus && (paymentStatus.startsWith('failed') || paymentStatus === 'cancelled_by_user' || paymentStatus === 'not_found')) {
        statusIcon = <XCircle className="h-12 w-12 text-red-600" />;
        statusTitle = "Payment Issue";
        alertVariantForComponent = "destructive";
    } else if (stkCheckoutId || paymentStatus === 'initiated' || paymentStatus === 'pending_stk_initiation' || paymentStatus === 'pending_confirmation') {
        statusTitle = "Waiting for M-Pesa Confirmation...";
    }

    return (
        <div className="text-center py-10 flex flex-col items-center space-y-6 min-h-[calc(100vh-200px)] justify-center">
            {statusIcon}
            <h2 className="text-2xl font-semibold">{statusTitle}</h2>
            <Alert variant={alertVariantForComponent} className={cn("max-w-md text-left", successAlertClasses)}>
                {(paymentStatus === 'successful' && <CheckCircle className="h-4 w-4" />) ||
                 (paymentStatus && (paymentStatus.startsWith('failed') || paymentStatus === 'cancelled_by_user' || paymentStatus === 'not_found') && <XCircle className="h-4 w-4" />) ||
                 (stkCheckoutId && (paymentStatus === null || paymentStatus === 'pending_confirmation' || paymentStatus === 'initiated' || paymentStatus === 'pending_stk_initiation') && <Loader2 className="h-4 w-4 animate-spin" />)}
                <AlertTitle className="capitalize">
                    {paymentStatus ? paymentStatus.replace(/_/g, ' ') : "Status"}
                 </AlertTitle>
                <AlertDescription>
                    {pollingMessage || "Please wait while we confirm your payment."}
                </AlertDescription>
            </Alert>
            {paymentStatus === 'successful' && selectedDeliveryOption && (
                <Card className={cn("mt-4 p-4 max-w-lg text-left", successAlertClasses)}>
                    <div className="flex items-start space-x-3">
                        <Info className={cn("h-5 w-5 flex-shrink-0 mt-0.5", "text-green-700 dark:text-green-400")}/>
                        <div>
                            <p className="font-semibold">
                                {selectedDeliveryOption.is_pickup ? "Pickup Information:" : "Delivery Information:"}
                            </p>
                            <p className="text-sm">
                                {selectedDeliveryOption.is_pickup
                                    ? selectedDeliveryOption.description || "Dynamic Mall, Shop M90, CBD, Nairobi."
                                    : `Your order will be delivered via ${selectedDeliveryOption.name} to your registered address: ${user?.address || 'Not specified'}.`}
                            </p>
                        </div>
                    </div>
                </Card>
            )}
            <div className="flex space-x-4 pt-4">
              {paymentStatus !== 'successful' && (
                  <Button
                    onClick={() => {
                        stopPolling(); setIsStkFlowActive(false); setPaymentStatus(null); setStkCheckoutId(null);
                        checkoutForm.reset();
                        // Re-fetch cart in case of partial failures or to reset context if needed
                        fetchCart();
                    }}
                    variant="outline"
                  >
                      {paymentStatus && (paymentStatus.startsWith('failed') || paymentStatus === 'cancelled_by_user' || paymentStatus === 'not_found') ? "Try Again / Back to Cart" : "Cancel & Back to Cart"}
                  </Button>
              )}
              <Button onClick={() => router.push('/orders')}>
                  {paymentStatus === 'successful' ? 'View My Orders' : 'Check My Orders'}
              </Button>
            </div>
        </div>
    );
  }

  if ((cartIsLoading || isLoadingDeliveryOptions) && !cart && !isStkFlowActive) {
    return (
        <div>
             <h1 className="text-3xl font-bold tracking-tight mb-6 font-serif">Your Cart</h1>
             <div className="space-y-4">
                <Skeleton className="h-28 w-full" />
                <Skeleton className="h-28 w-full" />
             </div>
              <div className="mt-6">
                  <Skeleton className="h-10 w-1/3 ml-auto" />
                  <Skeleton className="h-12 w-full mt-4" />
                  <Skeleton className="h-10 w-full mt-2" />
              </div>
        </div>
    );
  }
  if ((!cart || itemCount === 0) && !isStkFlowActive) {
     return (
      <div className="text-center py-10 min-h-[300px] flex flex-col justify-center items-center">
        <ShoppingCart className="mx-auto h-12 w-12 text-muted-foreground" />
        <h2 className="mt-4 text-xl font-semibold">Your Cart is Empty</h2>
        <p className="mt-2 text-muted-foreground">Add some amazing artwork to get started.</p>
        <Button asChild className="mt-4">
          <Link href="/artworks">Explore Artwork</Link>
        </Button>
      </div>
    );
  }

  const pickupOptions = deliveryOptions.filter(opt => opt.is_pickup);
  const actualDeliveryOptions = deliveryOptions.filter(opt => !opt.is_pickup);

  return (
    <div>
      <h1 className="text-3xl font-bold tracking-tight mb-6 font-serif">Your Cart ({itemCount} {itemCount === 1 ? 'item' : 'items'})</h1>
      <div className="lg:grid lg:grid-cols-3 lg:gap-8">
        <div className="lg:col-span-2">
          <Card>
            <CardHeader>
              <CardTitle>Items in your cart</CardTitle>
            </CardHeader>
            <CardContent className="p-0">
              <div className="divide-y">
                 {cart?.items.map((item) => (
                   <div key={item.id} className="px-4 sm:px-6">
                       <CartItem
                         item={item}
                         onUpdateQuantity={updateCartItem}
                         onRemoveItem={removeFromCart}
                         isUpdating={cartIsLoading}
                       />
                   </div>
                 ))}
              </div>
            </CardContent>
          </Card>
        </div>

        <div className="lg:col-span-1 mt-8 lg:mt-0">
          <Card>
            <CardHeader>
              <CardTitle>Order Summary</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex justify-between">
                <span>Subtotal</span>
                <span>{formatPrice(cartSubtotal)}</span>
              </div>

              {/* Delivery/Pickup Options */}
              <Separator />
              <div>
                <Label className="text-base font-semibold mb-2 block">Shipping Options</Label>
                <RadioGroup
                    value={deliveryType}
                    onValueChange={(value: 'pickup' | 'delivery') => handleDeliveryTypeChange(value)}
                    className="mb-3 grid grid-cols-2 gap-2"
                >
                    <Label htmlFor="pickup"
                        className={cn(
                            "flex flex-col items-center justify-between rounded-md border-2 border-muted bg-popover p-3 hover:bg-accent hover:text-accent-foreground cursor-pointer",
                            deliveryType === 'pickup' && "border-primary"
                        )}>
                        <RadioGroupItem value="pickup" id="pickup" className="sr-only" />
                        <Package className="mb-2 h-6 w-6" />
                        Pick Up
                    </Label>
                    <Label htmlFor="delivery"
                        className={cn(
                            "flex flex-col items-center justify-between rounded-md border-2 border-muted bg-popover p-3 hover:bg-accent hover:text-accent-foreground cursor-pointer",
                            deliveryType === 'delivery' && "border-primary"
                        )}>
                        <RadioGroupItem value="delivery" id="delivery" className="sr-only" />
                        <Truck className="mb-2 h-6 w-6" />
                        Delivery
                    </Label>
                </RadioGroup>

                {isLoadingDeliveryOptions && <Loader2 className="h-5 w-5 animate-spin my-2" />}

                {!isLoadingDeliveryOptions && deliveryType === 'pickup' && pickupOptions.length > 0 && (
                    <Select
                        value={selectedDeliveryOptionId || ""}
                        onValueChange={(value) => setSelectedDeliveryOptionId(value)}
                    >
                        <SelectTrigger>
                            <SelectValue placeholder="Select pickup location" />
                        </SelectTrigger>
                        <SelectContent>
                            {pickupOptions.map(opt => (
                                <SelectItem key={opt.id} value={opt.id}>
                                    {opt.name} - ({formatPrice(opt.price)})
                                </SelectItem>
                            ))}
                        </SelectContent>
                    </Select>
                )}
                {!isLoadingDeliveryOptions && deliveryType === 'pickup' && pickupOptions.length === 0 && (
                    <p className="text-sm text-muted-foreground">No pickup options available.</p>
                )}

                {!isLoadingDeliveryOptions && deliveryType === 'delivery' && actualDeliveryOptions.length > 0 && (
                     <Select
                        value={selectedDeliveryOptionId || ""}
                        onValueChange={(value) => setSelectedDeliveryOptionId(value)}
                    >
                        <SelectTrigger>
                            <SelectValue placeholder="Select delivery zone" />
                        </SelectTrigger>
                        <SelectContent>
                            {actualDeliveryOptions.map(opt => (
                                <SelectItem key={opt.id} value={opt.id}>
                                    {opt.name} - ({formatPrice(opt.price)})
                                </SelectItem>
                            ))}
                        </SelectContent>
                    </Select>
                )}
                {!isLoadingDeliveryOptions && deliveryType === 'delivery' && actualDeliveryOptions.length === 0 && (
                    <p className="text-sm text-muted-foreground">No delivery options available.</p>
                )}
                {selectedDeliveryOption && (
                    <p className="text-xs text-muted-foreground mt-1">{selectedDeliveryOption.description}</p>
                )}
              </div>

              <div className="flex justify-between">
                <span>Delivery Fee</span>
                <span>{formatPrice(deliveryCost)}</span>
              </div>
              <Separator />
              <div className="flex justify-between font-semibold text-lg">
                <span>Grand Total</span>
                <span>{formatPrice(grandTotal)}</span>
              </div>
            </CardContent>
            <CardFooter className="flex-col items-stretch space-y-4">
                <h3 className="text-lg font-semibold">Checkout with M-Pesa</h3>
                 <Form {...checkoutForm}>
                    <form onSubmit={checkoutForm.handleSubmit(handleInitiateCheckout)} className="space-y-4">
                         <FormField
                            control={checkoutForm.control}
                            name="phoneNumber"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>M-Pesa Phone Number</FormLabel>
                                <FormControl>
                                  <Input type="tel" placeholder="2547XXXXXXXX" {...field} />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                         <Button type="submit" className="w-full"
                                 disabled={isStkFlowActive || itemCount === 0 || cartIsLoading || authIsLoading || !selectedDeliveryOptionId || grandTotal <=0}>
                            {isStkFlowActive ? (
                                <><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Processing...</>
                            ) : (
                                "Place Order & Pay with M-Pesa"
                            )}
                         </Button>
                    </form>
                 </Form>
                 {selectedDeliveryOption && selectedDeliveryOption.is_pickup && (
                     <p className="text-xs text-muted-foreground text-center">
                        Selected Pickup: {selectedDeliveryOption.name}
                     </p>
                 )}
                 {selectedDeliveryOption && !selectedDeliveryOption.is_pickup && (
                     <p className="text-xs text-muted-foreground text-center">
                        Selected Delivery: {selectedDeliveryOption.name} <br/>
                        {user?.address ? `To: ${user.address}` : "Please ensure your address is updated in your profile."}
                     </p>
                 )}
            </CardFooter>
          </Card>
        </div>
      </div>
    </div>
  );
}

# === app/orders/page.tsx ===
// === app/orders/page.tsx ===
'use client';

import React, { useEffect, useState } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { Order as OrderType, OrderItem as OrderItemType } from '@/lib/types'; // OrderType now includes delivery_option_details
import { apiClient } from '@/lib/api';
import { useAuth } from '@/contexts/AuthContext';
import { formatPrice } from '@/lib/utils';

import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { Badge } from "@/components/ui/badge";
import { Skeleton } from "@/components/ui/skeleton";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Separator } from "@/components/ui/separator";
import { ListOrdered, Package, ShoppingBag, Loader2, ArrowLeft, ImageOff, Terminal, Truck, Info } from 'lucide-react';
import { useRouter } from 'next/navigation';

function OrderItemCard({ item }: { item: OrderItemType }) {
  const placeholderImage = "/placeholder-image.svg";
  return (
    <div className="flex items-center space-x-4 py-3">
      <div className="relative h-16 w-16 flex-shrink-0 overflow-hidden rounded-md border bg-muted">
        <Image
          src={item.artwork.image_url || placeholderImage}
          alt={item.artwork.name}
          fill
          sizes="64px"
          className="object-cover"
          onError={(e) => {
            (e.target as HTMLImageElement).srcset = placeholderImage;
            (e.target as HTMLImageElement).src = placeholderImage;
          }}
        />
        {!item.artwork.image_url && <ImageOff className="absolute inset-0 m-auto h-6 w-6 text-muted-foreground" />}
      </div>
      <div className="flex-1 space-y-1">
        <Link href={`/artworks/${item.artwork.id}`} className="font-medium hover:underline text-sm"> {/* Added Link */}
            {item.artwork.name}
        </Link>
        <p className="text-xs text-muted-foreground">By {item.artwork.artist.name}</p>
        <p className="text-xs text-muted-foreground">
          Qty: {item.quantity} @ {formatPrice(item.price_at_purchase)}
        </p>
      </div>
      <div className="font-medium text-sm">{formatPrice(parseFloat(item.price_at_purchase) * item.quantity)}</div>
    </div>
  );
}

function OrderCardSkeleton() {
  return (
    <Card>
      <CardHeader>
        <Skeleton className="h-6 w-3/4" />
        <Skeleton className="h-4 w-1/2 mt-1" />
      </CardHeader>
      <CardContent className="space-y-3">
        <Skeleton className="h-4 w-full" />
        <Skeleton className="h-4 w-5/6" />
      </CardContent>
      <CardFooter>
        <Skeleton className="h-8 w-1/4" />
      </CardFooter>
    </Card>
  );
}


export default function OrdersPage() {
  const { isAuthenticated, isLoading: authIsLoading, user } = useAuth();
  const router = useRouter();
  const [orders, setOrders] = useState<OrderType[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (authIsLoading) return;

    if (!isAuthenticated) {
      router.replace('/login?redirect=/orders');
      return;
    }

    const fetchOrders = async () => {
      setIsLoading(true);
      setError(null);
      try {
        const fetchedOrders = await apiClient.get<OrderType[]>('/orders/', { needsAuth: true });
        setOrders(fetchedOrders || []);
      } catch (err: any) {
        console.error("Failed to fetch orders:", err);
        setError(err.message || "An unknown error occurred");
      } finally {
        setIsLoading(false);
      }
    };

    fetchOrders();
  }, [isAuthenticated, authIsLoading, router]);

  if (authIsLoading || (isLoading && orders.length === 0 && !error)) {
    return (
      <div>
        <h1 className="text-3xl font-bold tracking-tight mb-8 font-serif">My Orders</h1>
        <div className="space-y-6">
          {Array.from({ length: 3 }).map((_, index) => (
            <OrderCardSkeleton key={index} />
          ))}
        </div>
      </div>
    );
  }

  if (!isAuthenticated && !authIsLoading) {
      return (
        <div className="text-center py-10">
          <Package className="mx-auto h-12 w-12 text-muted-foreground" />
          <h2 className="mt-4 text-xl font-semibold">Access Denied</h2>
          <p className="mt-2 text-muted-foreground">Please log in to view your orders.</p>
          <Button asChild className="mt-4">
            <Link href="/login?redirect=/orders">Log In</Link>
          </Button>
        </div>
      );
  }

  return (
    <div className="max-w-4xl mx-auto">
      <div className="flex items-center justify-between mb-8">
        <h1 className="text-3xl font-bold tracking-tight font-serif flex items-center">
            <ListOrdered className="mr-3 h-8 w-8 text-primary" /> My Orders
        </h1>
      </div>

      {error && (
        <Alert variant="destructive" className="mb-6">
          <Terminal className="h-4 w-4" />
          <AlertTitle>Error Fetching Orders</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {isLoading && orders.length === 0 && !error && (
         <div className="space-y-6">
            {Array.from({ length: 3 }).map((_, index) => (<OrderCardSkeleton key={index} />))}
         </div>
      )}


      {!isLoading && !error && orders.length === 0 && (
        <div className="text-center py-16 border-2 border-dashed border-gray-300 rounded-lg">
          <ShoppingBag className="mx-auto h-16 w-16 text-gray-400 mb-4" />
          <h2 className="text-2xl font-semibold text-gray-700 mb-2">No Orders Yet</h2>
          <p className="text-muted-foreground mb-6">
            You haven't placed any orders. Start exploring our artwork!
          </p>
          <Button asChild>
            <Link href="/artworks">Explore Artwork</Link>
          </Button>
        </div>
      )}

      {orders.length > 0 && (
        <Accordion type="single" collapsible className="w-full space-y-4">
          {orders.map((order) => (
            <AccordionItem value={order.id} key={order.id} className="bg-card border rounded-lg shadow-sm">
              <AccordionTrigger className="px-6 py-4 hover:no-underline">
                <div className="flex flex-col md:flex-row justify-between md:items-center w-full">
                    <div className="text-left">
                        <span className="font-medium text-primary">Order ID: {order.id.substring(0,8)}...</span>
                        <p className="text-xs text-muted-foreground mt-1">
                            Placed on: {new Date(order.created_at).toLocaleDateString()}
                        </p>
                    </div>
                    <div className="flex flex-col md:flex-row md:items-center md:space-x-4 mt-2 md:mt-0">
                         <Badge variant={
                            order.status === 'paid' || order.status === 'delivered' ? 'default' :
                            order.status === 'pending' ? 'secondary' :
                            order.status === 'shipped' ? 'outline' :
                            'destructive'
                         } className="capitalize mb-1 md:mb-0 w-fit md:w-auto">
                            {order.status}
                         </Badge>
                        <span className="font-semibold text-sm md:text-base">{formatPrice(order.total_price)}</span>
                    </div>
                </div>
              </AccordionTrigger>
              <AccordionContent className="px-6 pb-4 pt-0">
                <Separator className="mb-4" />
                <h3 className="text-sm font-semibold mb-2 text-muted-foreground">Items in this order:</h3>
                <div className="space-y-2 divide-y">
                  {order.items.map((item) => (
                    <OrderItemCard key={item.id} item={item} />
                  ))}
                </div>
                
                <Separator className="my-4" />
                <div className="text-xs text-muted-foreground space-y-1">
                    {order.delivery_option_details && (
                        <div className="flex items-center">
                            {order.delivery_option_details.is_pickup ? 
                                <Package className="mr-2 h-4 w-4 text-primary" /> : 
                                <Truck className="mr-2 h-4 w-4 text-primary" />
                            }
                            <p>
                                <strong>{order.delivery_option_details.is_pickup ? "Pickup:" : "Delivery:"}</strong>{' '}
                                {order.delivery_option_details.name}
                                {order.delivery_fee && parseFloat(order.delivery_fee) > 0 && ` (${formatPrice(order.delivery_fee)})`}
                            </p>
                        </div>
                    )}
                    {order.shipping_address && (
                        <div className="flex items-center">
                             <Info className="mr-2 h-4 w-4 text-primary" />
                             <p><strong>Address:</strong> {order.shipping_address}</p>
                        </div>
                    )}
                    {order.payment_gateway_ref && (
                         <div className="flex items-center">
                            <Info className="mr-2 h-4 w-4 text-primary" />
                            <p><strong>M-Pesa Ref:</strong> {order.payment_gateway_ref}</p>
                         </div>
                    )}
                </div>
              </AccordionContent>
            </AccordionItem>
          ))}
        </Accordion>
      )}
    </div>
  );
}

# === app/login/page.tsx ===
'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { useRouter, useSearchParams } from 'next/navigation';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { toast } from 'sonner';
import { Loader2 } from 'lucide-react';


import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { useAuth } from '@/contexts/AuthContext';
import { ApiErrorResponse } from '@/lib/types';

const loginSchema = z.object({
  email: z.string().email({ message: "Invalid email address." }),
  password: z.string().min(1, { message: "Password is required." }),
});

type LoginFormValues = z.infer<typeof loginSchema>;

export default function LoginPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const { login, isAuthenticated, isLoading: isAuthLoading, isAdmin } = useAuth();
  const [isSubmitting, setIsSubmitting] = useState(false);

  const form = useForm<LoginFormValues>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      email: "",
      password: "",
    },
  });

  useEffect(() => {
    if (!isAuthLoading && isAuthenticated) {
      const redirectPath = searchParams.get('redirect');
      if (isAdmin) {
        router.replace(redirectPath && redirectPath.startsWith('/admin') ? redirectPath : '/admin');
      } else {
        router.replace(redirectPath || '/');
      }
    }
  }, [isAuthenticated, isAuthLoading, isAdmin, router, searchParams]);

  const onSubmit = async (data: LoginFormValues) => {
    setIsSubmitting(true);
    try {
      await login(data.email, data.password);
    } catch (error: any) {
        console.error("Login failed:", error);
        const errorMessage = (error as ApiErrorResponse)?.message || "An error occurred during login.";
        toast.error(errorMessage);
    } finally {
      setIsSubmitting(false);
    }
  };

  if (isAuthLoading || (!isAuthLoading && isAuthenticated)) { 
      return <div className="flex justify-center items-center min-h-screen"><Loader2 className="h-12 w-12 animate-spin text-primary"/></div>;
  }

  return (
    <div className="flex items-center justify-center py-12">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle>Login</CardTitle>
          <CardDescription>Access your Artistry Haven account.</CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email</FormLabel>
                    <FormControl>
                      <Input type="email" placeholder="you@example.com" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="password"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Password</FormLabel>
                    <FormControl>
                      <Input type="password" placeholder="••••••••" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <Button type="submit" className="w-full" disabled={isSubmitting}>
                {isSubmitting ? <><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Logging In...</> : "Login"}
              </Button>
            </form>
          </Form>
        </CardContent>
        <CardFooter className="text-sm text-center block">
          Don't have an account?{" "}
          <Link href="/signup" className="underline hover:text-primary">
            Sign up
          </Link>
        </CardFooter>
      </Card>
    </div>
  );
}

# === app/signup/page.tsx ===
'use client';

import React, { useState } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { toast } from 'sonner';

import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { useAuth } from '@/contexts/AuthContext';
import { ApiErrorResponse } from '@/lib/types';

const signupSchema = z.object({
  name: z.string().min(2, { message: "Name must be at least 2 characters." }).optional(),
  email: z.string().email({ message: "Invalid email address." }),
  password: z.string().min(8, { message: "Password must be at least 8 characters." }),
  address: z.string().optional(),
});

type SignupFormValues = z.infer<typeof signupSchema>;

export default function SignupPage() {
  const router = useRouter();
  const { signup } = useAuth();
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<SignupFormValues>({
    resolver: zodResolver(signupSchema),
    defaultValues: {
      name: "",
      email: "",
      password: "",
      address: "",
    },
  });

  const onSubmit = async (data: SignupFormValues) => {
    setIsLoading(true);
    try {
      await signup(data);
      toast.success("Signup successful! Please log in.");
      router.push('/login');
    } catch (error: any) {
        console.error("Signup failed:", error);
        const errorMessage = (error as ApiErrorResponse)?.message || "An error occurred during signup.";
        toast.error(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex items-center justify-center py-12">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle>Sign Up</CardTitle>
          <CardDescription>Create your Artistry Haven account.</CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Name (Optional)</FormLabel>
                    <FormControl>
                      <Input placeholder="Your Name" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email</FormLabel>
                    <FormControl>
                      <Input type="email" placeholder="you@example.com" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="password"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Password</FormLabel>
                    <FormControl>
                      <Input type="password" placeholder="••••••••" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
               <FormField
                control={form.control}
                name="address"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Address (Optional)</FormLabel>
                    <FormControl>
                      <Input placeholder="123 Art Street" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <Button type="submit" className="w-full" disabled={isLoading}>
                {isLoading ? "Signing Up..." : "Sign Up"}
              </Button>
            </form>
          </Form>
        </CardContent>
        <CardFooter className="text-sm text-center block">
          Already have an account?{" "}
          <Link href="/login" className="underline hover:text-primary">
            Log in
          </Link>
        </CardFooter>
      </Card>
    </div>
  );
}

# === app/artists/page.tsx ===
// === app/artists/page.tsx ===
'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { Artist } from '@/lib/types';
import { apiClient } from '@/lib/api';

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, UserIcon } from "lucide-react";

interface ArtistCardProps {
  artist: Artist;
}

function ArtistCard({ artist }: ArtistCardProps) {
  return (
    <Link href={`/artists/${artist.id}`} className="block group"> {/* Removed legacyBehavior */}
      <Card className="h-full hover:shadow-lg transition-shadow duration-200">
        <CardHeader className="flex flex-row items-center space-x-4 pb-2">
          <div className="p-3 rounded-full bg-muted group-hover:bg-primary/10 transition-colors">
              <UserIcon className="h-6 w-6 text-muted-foreground group-hover:text-primary transition-colors" />
          </div>
          <CardTitle className="text-xl group-hover:text-primary transition-colors">{artist.name}</CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-sm text-muted-foreground line-clamp-3">
            {artist.bio || "No biography available."}
          </p>
        </CardContent>
      </Card>
    </Link>
  );
}

function ArtistCardSkeleton() {
  return (
    <Card>
      <CardHeader className="flex flex-row items-center space-x-4 pb-2">
        <Skeleton className="h-12 w-12 rounded-full" />
        <Skeleton className="h-6 w-3/5" />
      </CardHeader>
      <CardContent>
        <Skeleton className="h-4 w-full mb-2" />
        <Skeleton className="h-4 w-4/5" />
      </CardContent>
    </Card>
  );
}

export default function ArtistsPage() {
  const [artists, setArtists] = useState<Artist[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchArtists = async () => {
      setIsLoading(true);
      setError(null);
      try {
        const fetchedArtists = await apiClient.get<Artist[]>('/artists/');
        setArtists(fetchedArtists || []);
      } catch (err: any) {
        console.error("Failed to fetch artists:", err);
        setError(err.message || "An unknown error occurred");
      } finally {
        setIsLoading(false);
      }
    };

    fetchArtists();
  }, []);

  return (
    <div>
      <h1 className="text-3xl font-bold tracking-tight mb-8 font-serif">
        Discover Our Artists
      </h1>

      {error && (
        <Alert variant="destructive" className="mb-6">
          <Terminal className="h-4 w-4" />
          <AlertTitle>Error Fetching Artists</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {isLoading ? (
          Array.from({ length: 6 }).map((_, index) => (
            <ArtistCardSkeleton key={index} />
          ))
        ) : artists.length > 0 ? (
          artists.map((artist) => (
            <ArtistCard key={artist.id} artist={artist} />
          ))
        ) : (
          !error && (
            <div className="col-span-full text-center py-10 text-muted-foreground">
              <UserIcon className="h-16 w-16 mx-auto mb-4 text-gray-400" />
              <p className="text-xl">No artists found at the moment.</p>
              <p>Check back later to discover talented creators.</p>
            </div>
          )
        )}
      </div>
    </div>
  );
}

# === app/artists/[id]/page.tsx ===
'use client';

import React, { useEffect, useState } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { Artist as ArtistType, Artwork as ArtworkTypeFull, ApiErrorResponse } from '@/lib/types';
import { apiClient } from '@/lib/api';
import { useAuth } from '@/contexts/AuthContext';
import Link from 'next/link';

import { ArtworkCard, ArtworkCardSkeleton } from '@/components/artwork/ArtworkCard';
import { Skeleton } from '@/components/ui/skeleton';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Button } from '@/components/ui/button';
import { ArrowLeft, Palette, Terminal, UserCircle2, Edit, InfoIcon, EyeOff } from 'lucide-react';
import { Separator } from '@/components/ui/separator';
import { Badge } from '@/components/ui/badge';


function ArtistDetailSkeleton() {
  return (
    <div className="space-y-8">
      <div className="flex flex-col md:flex-row items-start md:items-center gap-6">
        <Skeleton className="h-32 w-32 rounded-full bg-muted" />
        <div className="space-y-3 flex-grow">
          <Skeleton className="h-10 w-3/4" />
          <Skeleton className="h-5 w-full" />
          <Skeleton className="h-5 w-full" />
          <Skeleton className="h-5 w-2/3" />
        </div>
      </div>
      <Separator />
      <div>
        <Skeleton className="h-8 w-1/3 mb-6" />
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
          {Array.from({ length: 4 }).map((_, index) => (
            <ArtworkCardSkeleton key={index} />
          ))}
        </div>
      </div>
    </div>
  );
}

export default function ArtistDetailPage() {
  const params = useParams();
  const router = useRouter();
  const artistId = params.id as string;

  const [artist, setArtist] = useState<ArtistType | null>(null);
  const [isLoading, setIsLoading] = useState(true); 
  const [error, setError] = useState<string | null>(null);
  const { isAdmin, isLoading: authIsLoading, isAuthenticated } = useAuth(); 

  useEffect(() => {
    if (artistId) {
      const fetchArtist = async () => {
        setIsLoading(true);
        setError(null);
        try {
          const fetchedArtist = await apiClient.get<ArtistType>(`/artists/${artistId}`, { needsAuth: isAuthenticated });
          setArtist(fetchedArtist);
        } catch (err: any) {
          console.error("Failed to fetch artist details:", err);
          if (err.message && (err.message.includes('404') || err.message.toLowerCase().includes('not found'))) {
             setError("Artist not found or is not currently active.");
          } else {
             setError( (err as ApiErrorResponse).message || "An unknown error occurred");
          }
        } finally {
          setIsLoading(false);
        }
      };
      fetchArtist();
    }
  }, [artistId, isAuthenticated]);

  if (isLoading || authIsLoading) {
    return <ArtistDetailSkeleton />;
  }

  if (error || !artist) {
     return (
      <div className="text-center py-10">
        <Alert variant="destructive" className="max-w-lg mx-auto">
          <Terminal className="h-4 w-4" />
          <AlertTitle>{error ? "Error Fetching Artist" : "Artist Not Found"}</AlertTitle>
          <AlertDescription>{error || "The artist you are looking for does not exist or is not active."}</AlertDescription>
        </Alert>
        <Button variant="outline" onClick={() => router.push('/artists')} className="mt-6">
          <ArrowLeft className="mr-2 h-4 w-4" /> View Other Artists
        </Button>
      </div>
    );
  }
  
  if (!artist.is_active && !isAdmin) {
     return (
        <div className="text-center py-10">
            <UserCircle2 className="h-16 w-16 mx-auto mb-4 text-gray-400" />
            <p className="text-xl text-muted-foreground">Artist Not Found</p>
            <p className="text-sm text-muted-foreground">This artist is not currently active.</p>
            <Button variant="outline" onClick={() => router.push('/artists')} className="mt-6">
                View Other Artists
            </Button>
        </div>
    );
  }
  
  const artworksToDisplay = artist.artworks || [];

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex justify-between items-center mb-8">
        <Button variant="outline" size="sm" onClick={() => router.back()}>
          <ArrowLeft className="mr-2 h-4 w-4" /> Back
        </Button>
        {isAdmin && (
          <Link href={`/admin/artists?edit=${artist.id}`} passHref legacyBehavior>
            <Button variant="default" size="sm">
              <Edit className="mr-2 h-4 w-4" /> Edit Artist in Admin
            </Button>
          </Link>
        )}
      </div>

      {isAdmin && !artist.is_active && (
        <Alert variant="warning" className="mb-6">
            <EyeOff className="h-4 w-4" />
            <AlertTitle>Admin View: Inactive Artist</AlertTitle>
            <AlertDescription>This artist is currently marked as inactive and is hidden from public view. Their artworks will also be hidden from public view, regardless of individual artwork status.</AlertDescription>
        </Alert>
      )}
       {isAdmin && artist.is_active && (
        <Alert 
            variant="default" 
            className="mb-6 bg-blue-50 border-blue-500 text-blue-700 dark:bg-blue-900/30 dark:border-blue-700 dark:text-blue-400 [&>svg~*]:pl-7 [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-blue-700 dark:[&>svg]:text-blue-400"
        >
            <InfoIcon className="h-4 w-4" />
            <AlertTitle>Admin View: Active Artist</AlertTitle>
            <AlertDescription>This artist is currently active and visible to public users.</AlertDescription>
        </Alert>
      )}

      <header className="mb-10">
        <div className="flex flex-col md:flex-row items-start md:items-center gap-6 mb-6">
            <div className="flex-shrink-0">
                <UserCircle2 className="h-32 w-32 text-muted-foreground" />
            </div>
            <div>
                <h1 className="text-4xl lg:text-5xl font-bold font-serif text-primary tracking-tight mb-2">
                    {artist.name}
                    {!artist.is_active && <Badge variant="outline" className="ml-3 text-base align-middle">Inactive</Badge>}
                </h1>
                <p className="text-muted-foreground leading-relaxed max-w-2xl">
                    {artist.bio || "This artist has not provided a biography yet."}
                </p>
            </div>
        </div>
      </header>
      
      <Separator className="my-10"/>

      <div>
        <h2 className="text-3xl font-semibold font-serif mb-8 flex items-center">
            <Palette className="mr-3 h-7 w-7 text-primary" />
            Artworks by {artist.name}
            {isAdmin && <Badge variant="outline" className="ml-3">Admin View: Showing {artworksToDisplay.length} artworks ({artist.artworks?.filter(aw => aw.is_active).length} active)</Badge>}
        </h2>
        {artworksToDisplay.length > 0 ? (
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-x-6 gap-y-8">
            {artworksToDisplay.map((artwork) => (
              <ArtworkCard key={artwork.id} artwork={artwork as ArtworkTypeFull} />
            ))}
          </div>
        ) : (
          <div className="text-center py-10 text-muted-foreground col-span-full">
             <Palette className="h-16 w-16 mx-auto mb-4 text-gray-400" />
            <p className="text-xl">
                {isAdmin && (artist.artworks || []).length > 0 
                    ? `This artist has artworks, but ${artworksToDisplay.length === 0 ? 'none match current filter (e.g. public active ones).' : 'all their artworks are shown above.'}` 
                    : "No artworks found for this artist at the moment."}
                {!isAdmin && "No active artworks found for this artist at the moment."}
            </p>
             {!isAdmin && <p className="mt-2">Check back later for creations from this artist.</p>}
          </div>
        )}
      </div>
    </div>
  );
}

# === app/artworks/page.tsx ===
'use client';

import React, { useState, useEffect } from 'react';
import { Artwork } from '@/lib/types';
import { apiClient } from '@/lib/api';
import { ArtworkCard, ArtworkCardSkeleton } from '@/components/artwork/ArtworkCard';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Palette, Terminal } from "lucide-react";

export default function ArtworksPage() {
  const [artworks, setArtworks] = useState<Artwork[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchArtworks = async () => {
      setIsLoading(true);
      setError(null);
      try {
        const fetchedArtworks = await apiClient.get<Artwork[]>('/artworks/');
        setArtworks(fetchedArtworks || []);
      } catch (err: any) {
        console.error("Failed to fetch artworks:", err);
        setError(err.message || "An unknown error occurred");
      } finally {
        setIsLoading(false);
      }
    };

    fetchArtworks();
  }, []);

  return (
    <div>
      <h1 className="text-3xl font-bold tracking-tight mb-6 font-serif">
        Explore Our Artwork
      </h1>

      {error && (
        <Alert variant="destructive" className="mb-6">
          <Terminal className="h-4 w-4" />
          <AlertTitle>Error Fetching Artwork</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
        {isLoading ? (
          Array.from({ length: 8 }).map((_, index) => (
            <ArtworkCardSkeleton key={index} />
          ))
        ) : artworks.length > 0 ? (
          artworks.map((artwork, index) => (
            <ArtworkCard key={artwork.id} artwork={artwork} isPriority={index < 4} />
          ))
        ) : (
          !error && (
            <div className="col-span-full text-center py-10 text-muted-foreground">
                <Palette className="h-16 w-16 mx-auto mb-4 text-gray-400" />
                <p className="text-xl">No artwork found.</p>
                <p>Our gallery is currently empty. Please check back soon!</p>
            </div>
          )
        )}
      </div>
    </div>
  );
}

# === app/artworks/[id]/page.tsx ===
'use client';

import React, { useEffect, useState } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Image from 'next/image';
import Link from 'next/link';
import { Artwork as ArtworkType, ApiErrorResponse } from '@/lib/types';
import { apiClient } from '@/lib/api';
import { formatPrice, cn } from '@/lib/utils';
import { useCart } from '@/contexts/CartContext';
import { useAuth } from '@/contexts/AuthContext';

import { Button } from '@/components/ui/button';
import { AspectRatio } from '@/components/ui/aspect-ratio';
import { Skeleton } from '@/components/ui/skeleton';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Separator } from '@/components/ui/separator';
import { Badge } from "@/components/ui/badge";
import { ArrowLeft, ImageOff, Loader2, ShoppingCart, CheckCircle, Terminal, Edit, InfoIcon, DollarSign, Package, PackageCheck, PackageX, EyeOff } from 'lucide-react';


function ArtworkDetailSkeleton() {
  return (
    <div className="grid md:grid-cols-2 gap-8 lg:gap-12 items-start">
      <Skeleton className="w-full">
        <AspectRatio ratio={1 / 1} className="bg-muted" />
      </Skeleton>
      <div className="space-y-6">
        <Skeleton className="h-10 w-3/4" />
        <Skeleton className="h-6 w-1/2" />
        <Skeleton className="h-8 w-1/3" />
        <div className="space-y-2">
          <Skeleton className="h-4 w-full" />
          <Skeleton className="h-4 w-full" />
          <Skeleton className="h-4 w-5/6" />
        </div>
        <Skeleton className="h-12 w-40" />
        <Skeleton className="h-5 w-1/4" />
      </div>
    </div>
  );
}


export default function ArtworkDetailPage() {
  const params = useParams();
  const router = useRouter();
  const artworkId = params.id as string;

  const [artwork, setArtwork] = useState<ArtworkType | null>(null);
  const [isLoading, setIsLoading] = useState(true); 
  const [error, setError] = useState<string | null>(null);
  const [isAddingToCart, setIsAddingToCart] = useState(false);

  const { addToCart, cart, isLoading: cartIsLoading } = useCart();
  const { isAdmin, isLoading: authIsLoading, isAuthenticated } = useAuth(); 
  const placeholderImage = "/placeholder-image.svg";

  useEffect(() => {
    if (artworkId) {
      const fetchArtwork = async () => {
        setIsLoading(true);
        setError(null);
        try {
          const fetchedArtwork = await apiClient.get<ArtworkType>(`/artworks/${artworkId}`, { needsAuth: isAuthenticated });
          setArtwork(fetchedArtwork);
        } catch (err: any) {
          console.error("Failed to fetch artwork:", err);
          if (err.message && (err.message.includes('404') || err.message.toLowerCase().includes('not found'))) {
             setError("Artwork not found or is not currently active.");
          } else {
             setError((err as ApiErrorResponse).message || "An unknown error occurred");
          }
        } finally {
          setIsLoading(false);
        }
      };
      fetchArtwork();
    }
  }, [artworkId, isAuthenticated]);

  const handleAddToCart = async () => {
    if (!artwork || isAdmin || !artwork.is_active || (artwork.artist && !artwork.artist.is_active)) return;
    setIsAddingToCart(true);
    try {
      await addToCart(artwork.id, 1);
    } catch (err) {
      console.error("Add to cart failed from ArtworkDetail page:", err);
    } finally {
      setIsAddingToCart(false);
    }
  };

  const isInCart = !isAdmin && cart?.items.some(item => item.artwork_id === artwork?.id);

  if (isLoading || authIsLoading) {
    return <ArtworkDetailSkeleton />;
  }

  if (error || !artwork) {
    return (
      <div className="text-center py-10">
        <Alert variant="destructive" className="max-w-lg mx-auto">
          <Terminal className="h-4 w-4" />
          <AlertTitle>{error ? "Error Fetching Artwork" : "Artwork Not Found"}</AlertTitle>
          <AlertDescription>{error || "The artwork you are looking for does not exist or is not active."}</AlertDescription>
        </Alert>
        <Button variant="outline" onClick={() => router.push('/artworks')} className="mt-6">
          <ArrowLeft className="mr-2 h-4 w-4" /> Explore Other Artworks
        </Button>
      </div>
    );
  }
  
  if (!artwork.is_active && !isAdmin) {
    return (
      <div className="text-center py-10">
        <ImageOff className="h-16 w-16 mx-auto mb-4 text-gray-400" />
        <p className="text-xl text-muted-foreground">Artwork Not Available</p>
        <p className="text-sm text-muted-foreground">This artwork is not currently active.</p>
         <Button variant="outline" onClick={() => router.push('/artworks')} className="mt-6">
           Explore Other Artworks
        </Button>
      </div>
    );
  }
  if (artwork.artist && !artwork.artist.is_active && !isAdmin) {
     return (
      <div className="text-center py-10">
        <ImageOff className="h-16 w-16 mx-auto mb-4 text-gray-400" />
        <p className="text-xl text-muted-foreground">Artwork Not Available</p>
        <p className="text-sm text-muted-foreground">The artist of this artwork is not currently active.</p>
         <Button variant="outline" onClick={() => router.push('/artworks')} className="mt-6">
           Explore Other Artworks
        </Button>
      </div>
    );
  }

  const canBePurchased = artwork.is_active && artwork.artist?.is_active && artwork.stock_quantity > 0;

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex justify-between items-center mb-6">
        <Button variant="outline" size="sm" onClick={() => router.back()}>
          <ArrowLeft className="mr-2 h-4 w-4" /> Back
        </Button>
        {isAdmin && (
          <Link href={`/admin/artworks?edit=${artwork.id}`} passHref legacyBehavior>
            <Button variant="default" size="sm">
              <Edit className="mr-2 h-4 w-4" /> Edit in Admin Panel
            </Button>
          </Link>
        )}
      </div>
      
      {isAdmin && (!artwork.is_active || (artwork.artist && !artwork.artist.is_active)) && (
        <Alert variant="warning" className="mb-6">
            <EyeOff className="h-4 w-4" />
            <AlertTitle>Admin View: Potentially Hidden Artwork</AlertTitle>
            <AlertDescription>
              This artwork is currently {!artwork.is_active ? 'marked as INACTIVE' : 'marked as ACTIVE'}.
              Its artist is currently {artwork.artist && !artwork.artist.is_active ? 'marked as INACTIVE' : 'marked as ACTIVE'}.
              If either the artwork or its artist is inactive, it will be hidden from public users.
            </AlertDescription>
        </Alert>
      )}
       {isAdmin && artwork.is_active && artwork.artist?.is_active && (
        <Alert variant="default" className="mb-6 bg-blue-50 border-blue-500 text-blue-700 dark:bg-blue-900/30 dark:border-blue-700 dark:text-blue-400 [&>svg~*]:pl-7 [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-blue-700 dark:[&>svg]:text-blue-400">
            <InfoIcon className="h-4 w-4" />
            <AlertTitle>Admin View: Active & Visible Artwork</AlertTitle>
            <AlertDescription>This artwork and its artist are active. It is visible to public users.</AlertDescription>
        </Alert>
      )}


      <div className="grid md:grid-cols-2 gap-8 lg:gap-12 items-start">
        <div className="w-full bg-muted rounded-lg overflow-hidden border">
          <AspectRatio ratio={1 / 1}>
            <Image
              src={artwork.image_url || placeholderImage}
              alt={artwork.name}
              fill
              className="object-cover"
              sizes="(max-width: 768px) 100vw, 50vw"
              priority
              onError={(e) => {
                const target = e.target as HTMLImageElement;
                target.srcset = placeholderImage;
                target.src = placeholderImage;
              }}
            />
             {!artwork.image_url && (
                <div className="absolute inset-0 flex items-center justify-center bg-muted/50">
                    <ImageOff className="h-24 w-24 text-gray-400" />
                </div>
            )}
          </AspectRatio>
        </div>

        <div className="space-y-6">
          <div>
            <h1 className="text-3xl lg:text-4xl font-bold font-serif text-primary tracking-tight">
              {artwork.name}
              {!artwork.is_active && <Badge variant="outline" className="ml-2 text-base align-middle">Inactive Artwork</Badge>}
            </h1>
            <Link href={`/artists/${artwork.artist.id}`} className="text-lg text-muted-foreground hover:text-primary transition-colors">
              By {artwork.artist.name}
              {artwork.artist && !artwork.artist.is_active && <Badge variant="outline" className="ml-2 text-sm align-middle">Inactive Artist</Badge>}
            </Link>
          </div>

          <div className="flex items-center space-x-2">
            <DollarSign className="h-6 w-6 text-primary" />
            <p className="text-2xl font-semibold text-primary">
                {formatPrice(artwork.price)}
            </p>
          </div>
          
          {(isAdmin || artwork.stock_quantity > 0) && (
            <div className="flex items-center space-x-2">
                 {artwork.stock_quantity > 0 ? <PackageCheck className="h-5 w-5 text-green-600" /> : <PackageX className="h-5 w-5 text-red-600" />}
                <p className={cn("text-sm", artwork.stock_quantity > 0 ? "text-muted-foreground" : "text-red-600 font-semibold")}>
                    Stock: {artwork.stock_quantity} {artwork.stock_quantity === 0 && "(Out of Stock)"}
                </p>
            </div>
          )}

          <Separator />

          <div>
            <h2 className="text-xl font-semibold mb-2">Description</h2>
            <p className="text-muted-foreground leading-relaxed">
              {artwork.description || "No description provided."}
            </p>
          </div>

          <Separator />
          
          {!isAdmin && (
            <div className="space-y-4">
              {canBePurchased ? (
                <Button
                  size="lg"
                  className="w-full md:w-auto"
                  onClick={handleAddToCart}
                  disabled={authIsLoading || cartIsLoading || isAddingToCart || !!isInCart}
                >
                  {isAddingToCart ? (
                    <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                  ) : isInCart ? (
                    <CheckCircle className="mr-2 h-5 w-5" />
                  ) : (
                    <ShoppingCart className="mr-2 h-5 w-5" />
                  )}
                  {isAddingToCart ? 'Adding...' : isInCart ? 'Added to Cart' : 'Add to Cart'}
                </Button>
              ) : (
                <Button size="lg" className="w-full md:w-auto" disabled>
                  {artwork.stock_quantity === 0 ? 'Out of Stock' : 'Unavailable'}
                </Button>
              )}
              {canBePurchased && artwork.stock_quantity < 5 && artwork.stock_quantity > 0 && (
                <p className="text-sm text-orange-600">
                  Only {artwork.stock_quantity} left in stock!
                </p>
              )}
               {artwork.stock_quantity === 0 && (
                <p className="text-sm text-red-600 font-semibold">
                  This item is currently out of stock.
                </p>
              )}
               {!artwork.is_active && (
                 <p className="text-sm text-yellow-600 font-semibold">
                     This artwork is not currently active.
                 </p>
               )}
               {artwork.artist && !artwork.artist.is_active && (
                 <p className="text-sm text-yellow-600 font-semibold">
                     The artist of this artwork is not currently active.
                 </p>
               )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

# === contexts/AuthContext.tsx ===
'use client';

import React, { createContext, useState, useContext, useEffect, ReactNode, useCallback } from 'react';
import { User, ApiErrorResponse, SignupResponse, LoginResponse, UserProfile } from '@/lib/types';
import { apiClient } from '@/lib/api';

export const getAuthToken = (): string | null => {
   if (typeof window === 'undefined') return null;
   try {
      return localStorage.getItem('authToken');
   } catch (error) {
      console.error("Failed to read auth token from localStorage:", error);
      return null;
   }
};

const setAuthToken = (token: string | null): void => {
   if (typeof window === 'undefined') return;
   try {
      if (token) {
         localStorage.setItem('authToken', token);
      } else {
         localStorage.removeItem('authToken');
      }
   } catch (error) {
      console.error("Failed to update auth token in localStorage:", error);
   }
};

export const clearAuthToken = (): void => {
    setAuthToken(null);
    if (typeof window !== 'undefined') {
        try {
            localStorage.removeItem('isAdmin');
        } catch (error) {
            console.error("Failed to remove isAdmin from localStorage:", error);
        }
    }
};


interface AuthContextType {
  user: UserProfile | null;
  token: string | null;
  isLoading: boolean;
  isAuthenticated: boolean;
  isAdmin: boolean;
  login: (email: string, password: string) => Promise<void>;
  signup: (userData: Omit<User, 'id'|'created_at'|'is_admin'> & {password: string}) => Promise<void>;
  logout: () => Promise<void>;
  fetchUser: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [user, setUser] = useState<UserProfile | null>(null);
  const [token, setToken] = useState<string | null>(() => getAuthToken());
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [isAdmin, setIsAdmin] = useState<boolean>(() => {
    if (typeof window === 'undefined') return false;
    try {
        return localStorage.getItem('isAdmin') === 'true';
    } catch (error) {
        console.error("Failed to read isAdmin from localStorage:", error);
        return false;
    }
  });

  const storeAdminStatus = (isAdminFlag: boolean) => {
    if (typeof window !== 'undefined') {
        try {
            localStorage.setItem('isAdmin', String(isAdminFlag));
        } catch (error) {
            console.error("Failed to store isAdmin in localStorage:", error);
        }
    }
    setIsAdmin(isAdminFlag);
  };

  const fetchUser = useCallback(async () => {
    const currentToken = getAuthToken();
    if (!currentToken) {
       setToken(null);
       setUser(null);
       storeAdminStatus(false);
       setIsLoading(false);
       return;
    }

    if (currentToken && !user) {
        setToken(currentToken);
    }

    setIsLoading(true);
    try {
       const fetchedUser = await apiClient.get<UserProfile>('/auth/me', { needsAuth: true });
       if (fetchedUser) {
          setUser(fetchedUser);
          storeAdminStatus(!!fetchedUser.is_admin);
       } else {
          setUser(null);
          storeAdminStatus(false);
       }
    } catch (error: any) {
       console.warn("Failed to fetch user:", error.message);
       setUser(null);
       if (error.message?.includes("401") || error.message?.includes("Unauthorized")) {
            clearAuthToken();
            setToken(null);
       } else {
       }
    } finally {
       setIsLoading(false);
    }
  }, [user]);

  useEffect(() => {
     const currentToken = getAuthToken();
     if (currentToken && !user) {
         fetchUser();
     } else if (!currentToken) {
         setUser(null);
         setToken(null);
         storeAdminStatus(false);
         setIsLoading(false);
     } else {
         setIsLoading(false);
     }
  }, [fetchUser, user]);


  const login = async (email: string, password: string) => {
     try {
         const response = await apiClient.post<LoginResponse>('/auth/login', { email, password });

         if (response && typeof response.access_token === 'string') {
             setAuthToken(response.access_token);
             setToken(response.access_token);
             if (response.user) {
                 setUser(response.user as UserProfile);
                 storeAdminStatus(!!response.user.is_admin);
             } else {
                 await fetchUser();
             }
         } else {
             console.error("Login failed: Invalid response structure from server.", response);
             throw new Error("Login failed: Received an invalid response from the server.");
         }
     } catch (error) {
         console.error("Login failed:", error);
         clearAuthToken();
         setToken(null);
         setUser(null);
         throw error;
     }
  };

 const signup = async (userData: Omit<User, 'id'|'created_at'|'is_admin'> & {password: string}) => {
     try {
         const response = await apiClient.post<SignupResponse>('/auth/signup', userData);
         if (!response || !response.user) {
            throw new Error("Signup response did not include user data.");
         }
     } catch (error) {
         console.error("Signup failed:", error);
         throw error;
     }
 };

  const logout = async () => {
     const currentToken = getAuthToken();
     try {
        if (currentToken) {
           await apiClient.post('/auth/logout', {}, { needsAuth: true });
        }
     } catch (error) {
         console.warn("Logout API call failed (continuing client-side logout):", error);
     } finally {
        clearAuthToken();
        setToken(null);
        setUser(null);
        window.location.href = '/';
     }
  };

  const isAuthenticated = !isLoading && !!token;

  return (
    <AuthContext.Provider value={{ user, token, isLoading, isAuthenticated, isAdmin, login, signup, logout, fetchUser }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

# === contexts/CartContext.tsx ===
'use client';

import React, { createContext, useState, useContext, useEffect, ReactNode, useCallback } from 'react';
import { Cart, CartItem, Artwork } from '@/lib/types';
import { apiClient } from '@/lib/api';
import { useAuth } from './AuthContext';
import { toast } from 'sonner';

interface CartContextType {
  cart: Cart | null;
  isLoading: boolean;
  itemCount: number;
  totalPrice: number;
  fetchCart: () => Promise<void>;
  addToCart: (artworkId: string, quantity: number) => Promise<void>;
  updateCartItem: (itemId: string, quantity: number) => Promise<void>;
  removeFromCart: (itemId: string) => Promise<void>;
  clearCart: () => void;
}

const CartContext = createContext<CartContextType | undefined>(undefined);

export const CartProvider = ({ children }: { children: ReactNode }) => {
  const { isAuthenticated, isLoading: isAuthLoading } = useAuth();
  const [cart, setCart] = useState<Cart | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);

  const fetchCart = useCallback(async () => {
    if (!isAuthenticated) {
        setCart(null);
        return;
    }
    if (isLoading) return;
    setIsLoading(true);
    try {
      const fetchedCart = await apiClient.get<Cart>('/cart', { needsAuth: true });
      setCart(fetchedCart);
    } catch (error) {
      console.error("Failed to fetch cart:", error);
      toast.error("Could not load your cart.");
    } finally {
      setIsLoading(false);
    }
  }, [isAuthenticated, isLoading]);

  useEffect(() => {
    if (!isAuthLoading && isAuthenticated) {
      fetchCart();
    } else if (!isAuthLoading && !isAuthenticated) {
      setCart(null);
    }
  }, [isAuthenticated, isAuthLoading]);


  const updateLocalCart = (updatedCart: Cart | null) => {
      setCart(updatedCart);
  };

  const addToCart = async (artworkId: string, quantity: number) => {
      if (!isAuthenticated) {
          toast.error("Please log in to add items to cart.");
          throw new Error("Please log in to add items to cart.");
      }
      setIsLoading(true);
      try {
          const updatedCart = await apiClient.post<Cart>(
              '/cart',
              { artwork_id: artworkId, quantity },
              { needsAuth: true }
          );
          if (updatedCart) {
              updateLocalCart(updatedCart);
              toast.success("Item added to cart!");
          } else {
            await fetchCart();
            toast.success("Item added to cart!");
          }
      } catch (error: any) {
          console.error("Failed to add to cart:", error);
          toast.error(error.message || "Failed to add item to cart.");
          throw error;
      } finally {
          setIsLoading(false);
      }
  };

  const updateCartItem = async (itemId: string, quantity: number) => {
      if (!isAuthenticated) {
          toast.error("Authentication error.");
          throw new Error("Authentication error.");
      }
      setIsLoading(true);
      try {
          const updatedCart = await apiClient.put<Cart>(`/cart/items/${itemId}`, { quantity }, { needsAuth: true });
          if (updatedCart) {
              updateLocalCart(updatedCart);
              toast.success("Cart updated.");
          } else {
            await fetchCart();
            toast.success("Cart updated.");
          }
      } catch (error: any) {
          console.error("Failed to update cart item:", error);
          toast.error(error.message || "Failed to update item quantity.");
          throw error;
      } finally {
          setIsLoading(false);
      }
  };

  const removeFromCart = async (itemId: string) => {
      if (!isAuthenticated) {
          toast.error("Authentication error.");
          throw new Error("Authentication error.");
      }
      setIsLoading(true);
      try {
          const updatedCart = await apiClient.delete<Cart | null>(`/cart/items/${itemId}`, { needsAuth: true });
           if (updatedCart) {
               updateLocalCart(updatedCart);
               toast.success("Item removed from cart.");
           } else {
               await fetchCart();
               toast.success("Item removed from cart.");
           }
      } catch (error: any) {
          console.error("Failed to remove cart item:", error);
           toast.error(error.message || "Failed to remove item from cart.");
          throw error;
      } finally {
          setIsLoading(false);
      }
  };

  const clearCart = () => {
      setCart(null);
  }

  const itemCount = cart?.items.reduce((sum, item) => sum + item.quantity, 0) ?? 0;
  const totalPrice = cart?.items.reduce((sum, item) => {
       const price = parseFloat(item.artwork.price) || 0;
       return sum + (price * item.quantity);
  }, 0) ?? 0;


  return (
    <CartContext.Provider value={{ cart, isLoading, fetchCart, addToCart, updateCartItem, removeFromCart, clearCart, itemCount, totalPrice }}>
      {children}
    </CartContext.Provider>
  );
};

export const useCart = (): CartContextType => {
  const context = useContext(CartContext);
  if (context === undefined) {
    throw new Error('useCart must be used within a CartProvider');
  }
  return context;
};

# === hooks/use-mobile.ts ===
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

# === components/admin/AdminGuard.tsx ===
'use client';

import { useEffect, ReactNode } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/contexts/AuthContext';
import { Loader2 } from 'lucide-react';

interface AdminGuardProps {
  children: ReactNode;
}

export function AdminGuard({ children }: AdminGuardProps) {
  const { isAuthenticated, isAdmin, isLoading: authIsLoading } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!authIsLoading) {
      if (!isAuthenticated) {
        router.replace('/login?redirect=/admin');
      } else if (!isAdmin) {
        router.replace('/');
      }
    }
  }, [isAuthenticated, isAdmin, authIsLoading, router]);

  if (authIsLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <Loader2 className="h-12 w-12 animate-spin text-primary" />
      </div>
    );
  }

  if (isAuthenticated && isAdmin) {
    return <>{children}</>;
  }

  return null; 
}

# === components/artwork/ArtworkCard.tsx ===
import React from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { Artwork } from '@/lib/types';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { AspectRatio } from "@/components/ui/aspect-ratio";
import { useCart } from '@/contexts/CartContext';
import { useAuth } from '@/contexts/AuthContext';
import { formatPrice, cn } from '@/lib/utils';
import { Badge } from '@/components/ui/badge';
import { ImageOff, ShoppingCartIcon, Edit, DollarSign, PackageCheck, PackageX, EyeOff } from 'lucide-react';

interface ArtworkCardProps {
  artwork: Artwork;
  isPriority?: boolean;
}

export function ArtworkCard({ artwork, isPriority }: ArtworkCardProps) {
  const { addToCart, isLoading: isCartLoading, cart } = useCart();
  const { isAdmin, isLoading: authIsLoading } = useAuth();
  const placeholderImage = "/placeholder-image.svg";

  const handleAddToCart = async () => {
    if (isAdmin || !artwork.is_active || (artwork.artist && !artwork.artist.is_active)) return;
    try {
      await addToCart(artwork.id, 1);
    } catch (error) {
    }
  };

  const isInCart = !isAdmin && cart?.items.some(item => item.artwork_id === artwork.id);
  const isActuallyAvailable = artwork.is_active && artwork.artist?.is_active;

  return (
    <Card className="overflow-hidden flex flex-col h-full group border shadow-sm hover:shadow-lg transition-shadow duration-300">
       <CardHeader className="p-0 border-b relative">
         <Link href={`/artworks/${artwork.id}`} className="block" legacyBehavior>
           <a className={cn(!isActuallyAvailable && "opacity-60 group-hover:opacity-80 transition-opacity")}>
           <AspectRatio ratio={1 / 1} className="bg-muted overflow-hidden">
             <Image
               src={artwork.image_url || placeholderImage}
               alt={artwork.name}
               fill
               className="object-cover transition-transform duration-300 group-hover:scale-105"
               sizes="(max-width: 640px) 100vw, (max-width: 768px) 50vw, (max-width: 1024px) 33vw, 25vw"
               priority={isPriority || false}
               onError={(e) => {
                  const target = e.target as HTMLImageElement;
                  target.srcset = placeholderImage;
                  target.src = placeholderImage;
               }}
             />
             {!artwork.image_url && (
                <div className="absolute inset-0 flex items-center justify-center bg-muted/50">
                  <ImageOff className="h-12 w-12 text-gray-400" />
                </div>
              )}
              {!isAdmin && !isActuallyAvailable && (
                 <div className="absolute inset-0 bg-black/30 flex items-center justify-center">
                     <Badge variant="destructive">Unavailable</Badge>
                 </div>
              )}
           </AspectRatio>
           </a>
         </Link>
         {isAdmin && (
            <div className="absolute top-2 right-2 z-10 space-y-1">
             {!artwork.is_active && <Badge variant={'destructive'} className="block">Artwork Inactive</Badge>}
             {artwork.artist && !artwork.artist.is_active && <Badge variant={'destructive'} className="block opacity-80">Artist Inactive</Badge>}
            </div>
         )}
       </CardHeader>
       <CardContent className="p-4 flex-grow">
         <Link href={`/artworks/${artwork.id}`} className="block" legacyBehavior>
           <a className={cn("block", !isActuallyAvailable && "pointer-events-none")}>
           <CardTitle className={cn("text-lg font-medium hover:text-primary transition-colors line-clamp-2 mb-1", !isActuallyAvailable && "text-muted-foreground")}>
             {artwork.name}
           </CardTitle>
           </a>
         </Link>
         <Link href={`/artists/${artwork.artist.id}`} className="text-sm text-muted-foreground hover:text-primary transition-colors">
           {artwork.artist.name}
         </Link>
         {isAdmin ? (
            <div className="mt-2 text-xs space-y-1">
                <div className="flex items-center text-muted-foreground">
                    <DollarSign className="h-3.5 w-3.5 mr-1.5" /> Price: {formatPrice(artwork.price)}
                </div>
                <div className="flex items-center text-muted-foreground">
                    {artwork.stock_quantity > 0 ? <PackageCheck className="h-3.5 w-3.5 mr-1.5 text-green-600" /> : <PackageX className="h-3.5 w-3.5 mr-1.5 text-red-600" />}
                     Stock: {artwork.stock_quantity}
                </div>
            </div>
         ) : (
            <p className="text-sm text-muted-foreground mt-2 line-clamp-3 h-[3.75rem]">
                {artwork.description || "No description available."}
            </p>
         )}
       </CardContent>
       <CardFooter className="p-4 pt-0 flex justify-between items-center mt-auto">
        {!isAdmin && (
            <span className="text-lg font-semibold text-primary">
             {formatPrice(artwork.price)}
            </span>
        )}
         {isAdmin ? (
           <Link href={`/admin/artworks?edit=${artwork.id}`} className="w-full" legacyBehavior>
             <Button size="sm" variant="outline" className="w-full">
               <Edit className="mr-2 h-4 w-4" /> Edit Artwork
             </Button>
           </Link>
         ) : (
           <Button
              size="sm"
              variant={(artwork.stock_quantity === 0 || !isActuallyAvailable) ? "outline" : "default"}
              onClick={handleAddToCart}
              disabled={authIsLoading || isCartLoading || artwork.stock_quantity === 0 || isInCart || !isActuallyAvailable}
              aria-label={!isActuallyAvailable ? 'Unavailable' : artwork.stock_quantity === 0 ? 'Out of Stock' : isInCart ? 'Already in Cart' : 'Add to Cart'}
           >
              {!isActuallyAvailable ? (
                 <> <EyeOff className="mr-2 h-4 w-4" /> Unavailable</>
              ) : artwork.stock_quantity === 0 ? (
                  'Out of Stock'
              ) : isInCart ? (
                  'In Cart'
              ) : (
                  <>
                      <ShoppingCartIcon className="mr-2 h-4 w-4" /> Add to Cart
                  </>
              )}
           </Button>
         )}
       </CardFooter>
    </Card>
  );
}

export function ArtworkCardSkeleton() {
  return (
    <Card className="overflow-hidden flex flex-col h-full">
      <AspectRatio ratio={1 / 1} className="bg-muted animate-pulse" />
      <CardContent className="p-4 flex-grow">
        <div className="h-5 w-3/4 bg-muted rounded animate-pulse mb-2"></div>
        <div className="h-4 w-1/2 bg-muted rounded animate-pulse mb-3"></div>
        <div className="h-4 w-full bg-muted rounded animate-pulse mb-1"></div>
        <div className="h-4 w-full bg-muted rounded animate-pulse mb-1"></div>
        <div className="h-4 w-2/3 bg-muted rounded animate-pulse"></div>
      </CardContent>
      <CardFooter className="p-4 pt-0 flex justify-between items-center mt-auto">
        <div className="h-6 w-1/3 bg-muted rounded animate-pulse"></div>
        <div className="h-9 w-28 bg-muted rounded animate-pulse"></div>
      </CardFooter>
    </Card>
  );
}

# === components/layout/Footer.tsx ===
import React from 'react';

export function Footer() {
  return (
    <footer className="bg-muted text-muted-foreground border-t border-border mt-12 py-6">
      <div className="container mx-auto px-4 text-center text-sm">
        © {new Date().getFullYear()} Artistry Haven by izzie
      </div>
    </footer>
  );
}

# === components/layout/Navbar.tsx ===
'use client';

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { ShoppingCart, UserCog, LogOutIcon, Menu } from 'lucide-react';
import { useAuth } from '@/contexts/AuthContext';
import { useCart } from '@/contexts/CartContext';
import { Badge } from '@/components/ui/badge';
import {
  Sheet,
  SheetContent,
  SheetTrigger,
  SheetClose,
} from "@/components/ui/sheet";
import { Separator } from '../ui/separator';


export function Navbar() {
   const { isAuthenticated, isLoading, logout, isAdmin } = useAuth();
   const { itemCount } = useCart();
   const pathname = usePathname();

   const isInAdminSection = pathname.startsWith('/admin');

   const publicNavLinks = [
     { href: "/artworks", label: "Artwork" },
     { href: "/artists", label: "Artists" },
   ];

  return (
    <nav className="bg-card border-b border-border sticky top-0 z-50">
      <div className="container mx-auto px-4 h-16 flex items-center justify-between">
        <Link href={isAdmin && isInAdminSection ? "/admin" : "/"} className="text-xl font-bold font-serif text-primary">
          Artistry Haven {isInAdminSection && isAdmin && <span className="text-sm font-normal text-muted-foreground">- Admin</span>}
        </Link>

        {!isInAdminSection && (
          <div className="hidden md:flex items-center space-x-6">
            {publicNavLinks.map(link => (
                <Link key={link.href} href={link.href} className="text-sm font-medium text-muted-foreground hover:text-primary transition-colors">
                    {link.label}
                </Link>
            ))}
          </div>
        )}
        {isInAdminSection && isAdmin && (
             <div className="hidden md:flex items-center space-x-6">
                <Link href="/admin/artworks" className="text-sm font-medium text-muted-foreground hover:text-primary transition-colors">
                    Artworks
                </Link>
                <Link href="/admin/artists" className="text-sm font-medium text-muted-foreground hover:text-primary transition-colors">
                    Artists
                </Link>
                 <Link href="/admin/orders" className="text-sm font-medium text-muted-foreground hover:text-primary transition-colors">
                    Orders
                </Link>
             </div>
        )}


        <div className="flex items-center space-x-2 sm:space-x-4">
          {!isInAdminSection && (
            <Link href="/cart" aria-label="View Cart">
               <Button variant="ghost" size="icon" className="relative">
                  <ShoppingCart className="h-5 w-5" />
                  {isAuthenticated && itemCount > 0 && (
                     <Badge variant="destructive" className="absolute -top-1 -right-1 h-4 w-4 min-w-4 p-0 flex items-center justify-center text-xs">
                        {itemCount > 9 ? '9+' : itemCount}
                     </Badge>
                  )}
               </Button>
            </Link>
          )}

          {isLoading ? (
             <Button variant="ghost" size="sm" disabled>Loading...</Button>
          ) : isAuthenticated ? (
             <>
              {isAdmin && (
                <Link href={isInAdminSection ? "/" : "/admin"} title={isInAdminSection ? "Back to Site" : "Admin Dashboard"}>
                  <Button variant="ghost" size="icon">
                    {isInAdminSection ? <LogOutIcon className="h-5 w-5 transform rotate-180" /> : <UserCog className="h-5 w-5" />}
                  </Button>
                </Link>
              )}
              {!isInAdminSection && (
                <Link href="/orders">
                  <Button variant="ghost" size="sm" className="hidden sm:inline-flex">My Orders</Button>
                </Link>
              )}
              <Button variant="outline" size="sm" onClick={logout} className="hidden sm:inline-flex">Logout</Button>
             </>
          ) : (
             <>
             <Link href="/login">
                <Button variant="ghost" size="sm">Login</Button>
             </Link>
             <Link href="/signup">
                <Button size="sm">Sign Up</Button>
             </Link>
             </>
          )}

          <div className="md:hidden">
            <Sheet>
              <SheetTrigger asChild>
                <Button variant="ghost" size="icon"><Menu className="h-5 w-5" /></Button>
              </SheetTrigger>
              <SheetContent side="right" className="w-[280px] sm:w-[320px]">
                <div className="p-4">
                    <Link href={isAdmin && isInAdminSection ? "/admin" : "/"} className="text-lg font-bold font-serif text-primary mb-4 block">
                      Artistry Haven
                    </Link>
                    <Separator className="my-3"/>
                    
                    {isInAdminSection && isAdmin ? (
                        <>
                            <SheetClose asChild><Link href="/admin" className="flex items-center py-2 text-sm text-foreground hover:text-primary">Dashboard</Link></SheetClose>
                            <SheetClose asChild><Link href="/admin/artworks" className="flex items-center py-2 text-sm text-foreground hover:text-primary">Manage Artworks</Link></SheetClose>
                            <SheetClose asChild><Link href="/admin/artists" className="flex items-center py-2 text-sm text-foreground hover:text-primary">Manage Artists</Link></SheetClose>
                            <SheetClose asChild><Link href="/admin/orders" className="flex items-center py-2 text-sm text-foreground hover:text-primary">Manage Orders</Link></SheetClose>
                            <SheetClose asChild><Link href="/admin/delivery-options" className="flex items-center py-2 text-sm text-foreground hover:text-primary">Delivery Options</Link></SheetClose>
                            <Separator className="my-3"/>
                            <SheetClose asChild><Link href="/" className="flex items-center py-2 text-sm text-foreground hover:text-primary">Back to Site</Link></SheetClose>
                        </>
                    ) : (
                        <>
                            {publicNavLinks.map(link => (
                                <SheetClose asChild key={link.href}><Link href={link.href} className="flex items-center py-2 text-sm text-foreground hover:text-primary">{link.label}</Link></SheetClose>
                            ))}
                            {isAuthenticated && (
                                <SheetClose asChild><Link href="/orders" className="flex items-center py-2 text-sm text-foreground hover:text-primary">My Orders</Link></SheetClose>
                            )}
                        </>
                    )}
                    <Separator className="my-3"/>
                    {isAuthenticated ? (
                        <Button variant="outline" size="sm" onClick={() => {logout();}} className="w-full">Logout</Button>
                    ) : (
                        <div className="space-y-2">
                           <SheetClose asChild><Link href="/login" className="w-full"><Button variant="ghost" className="w-full">Login</Button></Link></SheetClose>
                           <SheetClose asChild><Link href="/signup" className="w-full"><Button className="w-full">Sign Up</Button></Link></SheetClose>
                        </div>
                    )}
                </div>
              </SheetContent>
            </Sheet>
          </div>

        </div>
      </div>
    </nav>
  );
}

# === components/layout/ConditionalNavbarWrapper.tsx ===
'use client';

import { usePathname } from 'next/navigation';
import { Navbar } from './Navbar';

export function ConditionalNavbarWrapper() {
  const pathname = usePathname();
  const isAdminView = pathname.startsWith('/admin');

  if (isAdminView) {
    return null;
  }

  return <Navbar />;
}
